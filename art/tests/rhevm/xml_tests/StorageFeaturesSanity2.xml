<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set ts=3 sw=3 expandtab: -->
<?xml-stylesheet type="text/xsl" href="table.xslt"?>

<input>
<test_case>
   <test_name>START_GROUP:Hotplug</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='storage_sanity_31_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='storage_sanity_31_cluster', cpu='{cpu_name}', data_center='storage_sanity_31_dc', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='storage_sanity_31_cluster', wait='true'</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_sanity_31_dc', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='storage_sanity_31_dc'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test1', description='a', cluster='storage_sanity_31_cluster', storagedomain='master_sd', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test1', size=6442450944, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test1', size=1024**3, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test1', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test1', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test2', description='a', cluster='storage_sanity_31_cluster', storagedomain='master_sd', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test2', size=6442450944, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test2', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test2', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till installation starts</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test1',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test2',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create shared disk</test_name>
   <test_action>addDisk</test_action>
   <parameters>alias='shared', provisioned_size=1073741824, size=1073741824, interface='e{interface_virtio}', format='e{format_raw}', storagedomain='master_sd', sparse='false', shareable=True</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till disk is created</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='shared'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test1', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test2', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait till vm 1 is up</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait till vm 2 is up</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test2'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach disk to VM1</test_name>
   <test_action>attachDiskToVm</test_action>
   <parameters>alias='shared', vmName='vm_test1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>854479</bz>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='shared'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach disk to VM2</test_name>
   <test_action>attachDiskToVm</test_action>
   <parameters>alias='shared', vmName='vm_test2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>854479</bz>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='shared'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate second disk on vm1</test_name>
   <test_action>deactivateVmDisk</test_action>
   <parameters>vm='vm_test1', diskAlias='vm_test1_Disk2'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate shared disk on vm1</test_name>
   <test_action>deactivateVmDisk</test_action>
   <parameters>vm='vm_test1', diskAlias='shared'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate shared disk on vm2</test_name>
   <test_action>deactivateVmDisk</test_action>
   <parameters>vm='vm_test2', diskAlias='shared'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Activate second disk on vm1</test_name>
   <test_action>activateVmDisk</test_action>
   <parameters>vm='vm_test1', diskAlias='vm_test1_Disk2'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<!-- TODO" Inner disk testing -->
<test_case>
   <test_name>Detach disk from first VM</test_name>
   <test_action>detachDiskFromVm</test_action>
   <parameters>alias='shared', vmName='vm_test1'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Detach disk from second VM</test_name>
   <test_action>detachDiskFromVm</test_action>
   <parameters>alias='shared', vmName='vm_test2'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VMs</test_name>
   <test_action>stopVms</test_action>
   <parameters>vms='vm_test1, vm_test2'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test2'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove shared disk</test_name>
   <test_action>deleteDisk</test_action>
   <parameters>alias='shared'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait untill disk disappears</test_name>
   <test_action>waitForDisksGone</test_action>
   <parameters>disksNames='shared'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_sanity_31_dc', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='storage_sanity_31_dc'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='storage_sanity_31_cluster'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:Hotplug</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP:StorageLiveUpgradeWithDCNFS</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>if('[data_domain_address]'.split(',')&gt;1 and '{data_center_type}'=='e{storage_type_nfs}')</run>
   <report/>
</test_case>
<test_case>
   <test_name>WORKAROUND FOR BZ#842257</test_name>
   <test_action>runMachineCommand</test_action>
   <parameters>ip='{vds}', user='root', password='{vds_password}', cmd="dmsetup remove_all"</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data center NFS</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='storage_san_upgr_nfs', storage_type='e{storage_type_nfs}', version='3.0'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create cluster NFS</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='storage_san_clust_nfs', cpu='{cpu_name}', data_center='storage_san_upgr_nfs', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='storage_san_clust_nfs', wait='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd_nfs', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}', storage_format='e{storage_format_version_v1}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='master_sd_nfs'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='storage_san_upgr_nfs'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test', description='a', cluster='storage_san_clust_nfs', storagedomain='master_sd_nfs', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test', size=6442450944, wait='True', storagedomain='master_sd_nfs', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till installation starts</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='upgraded_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[1]}', host='{vds[0]}', path='{data_domain_path[1]}', storage_format='e{storage_format_version_v1}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v1}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach new NFS</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Activate new NFS</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Upgrade DC</test_name>
   <test_action>updateDataCenter</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', version="3.1"</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='master_sd_nfs', version='e{storage_format_version_v3}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v3}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate non-master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Detach non-master domain</test_name>
   <test_action>detachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove non-master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='upgraded_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='upgraded_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[1]}', host='{vds[0]}', path='{data_domain_path[1]}', storage_format='e{storage_format_version_v1}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v1}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach new NFS</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Activate new NFS</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v3}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Deactivate non-master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
  <test_name>Detach Non Master Domains</test_name>
  <test_action>execOnNonMasterDomains</test_action>
  <parameters>datacenter='storage_san_upgr_nfs', operation='detach', type='all'</parameters>
  <positive>TRUE</positive>
  <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_nfs', storagedomain='master_sd_nfs'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='storage_san_upgr_nfs'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove non-master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='upgraded_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd_nfs', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='storage_san_clust_nfs'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:StorageLiveUpgradeWithDCNFS</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>

<test_case>
   <test_name>START_GROUP:StorageLiveUpgradeWithDCiSCSI</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>if('[lun_address]'.split(',')&gt;1 and '{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report/>
</test_case>
<test_case>
   <test_name>WORKAROUND FOR BZ#842257</test_name>
   <test_action>runMachineCommand</test_action>
   <parameters>ip='{vds}', user='root', password='{vds_password}', cmd="dmsetup remove_all"</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data center iSCSI</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='storage_san_upgr_iscsi', storage_type='e{storage_type_iscsi}', version='3.0'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create cluster iSCSI</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='storage_san_clust_iscsi', cpu='{cpu_name}', data_center='storage_san_upgr_iscsi', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='storage_san_clust_iscsi', wait='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd_iscsi', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260, storage_format='e{storage_format_version_v2}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='master_sd_iscsi'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='storage_san_upgr_iscsi'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test', description='a', cluster='storage_san_clust_iscsi', storagedomain='master_sd_iscsi', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test', size=6442450944, wait='True', storagedomain='master_sd_iscsi', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till installation starts</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}', target='{lun_target[1]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='upgraded_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[1]}', lun_address='{lun_address[1]}', lun_target='{lun_target[1]}', lun_port=3260, storage_format='e{storage_format_version_v2}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v2}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach new iSCSI</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Activate new iSCSI</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Upgrade DC</test_name>
   <test_action>updateDataCenter</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', version="3.1"</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='master_sd_iscsi', version='e{storage_format_version_v3}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v3}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate non-master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Detach non-master domain</test_name>
   <test_action>detachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove non-master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='upgraded_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}', target='{lun_target[1]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='upgraded_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[1]}', lun_address='{lun_address[1]}', lun_target='{lun_target[1]}', lun_port=3260, storage_format='e{storage_format_version_v2}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v2}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach new iSCSI</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Activate new iSCSI</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Check non-master storage domain format version</test_name>
   <test_action>checkStorageFormatVersion</test_action>
   <parameters>storagedomain='upgraded_sd', version='e{storage_format_version_v3}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Deactivate non-master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='upgraded_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
  <test_name>Detach Non Master Domains</test_name>
  <test_action>execOnNonMasterDomains</test_action>
  <parameters>datacenter='storage_san_upgr_iscsi', operation='detach', type='all'</parameters>
  <positive>TRUE</positive>
  <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi', storagedomain='master_sd_iscsi'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='storage_san_upgr_iscsi'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove non-master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='upgraded_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd_iscsi', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='storage_san_clust_iscsi'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:StorageLiveUpgradeWithDCiSCSI</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>

<test_case>
   <test_name>START_GROUP:FloatingDisk</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>WORKAROUND FOR BZ#842257</test_name>
   <test_action>runMachineCommand</test_action>
   <parameters>ip='{vds}', user='root', password='{vds_password}', cmd="dmsetup remove_all"</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='storage_sanity_31_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='storage_sanity_31_cluster', cpu='{cpu_name}', data_center='storage_sanity_31_dc', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='storage_sanity_31_cluster', wait='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_sanity_31_dc', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='storage_sanity_31_dc'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM 1</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test1', description='a', cluster='storage_sanity_31_cluster', storagedomain='master_sd', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test1', size=6442450944, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test1', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test1', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM 2</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test2', description='a', cluster='storage_sanity_31_cluster', storagedomain='master_sd', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test2', size=6442450944, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test2', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test2', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till installation starts</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test1',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test2',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address 1</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test1', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address 2</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test2',timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create floating disk</test_name>
   <test_action>addDisk</test_action>
   <parameters>alias='floating', provisioned_size=1073741824, size=1073741824, interface='e{interface_virtio}', format='e{format_cow}', storagedomain='master_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till disk is created</test_name>
   <test_action>waitForDisksState</test_action>
   <!-- Change _Disk1 to floating as soon as BZ#835954 is fixed -->
   <parameters>disksNames='floating'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach disk to VM1</test_name>
   <test_action>attachDiskToVm</test_action>
   <parameters>alias='floating', vmName='vm_test1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>854479</bz>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='floating'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<!-- TODO" Inner disk testing -->
<test_case>
   <test_name>Detach disk from first VM</test_name>
   <test_action>detachDiskFromVm</test_action>
   <parameters>alias='floating', vmName='vm_test1'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='floating'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach disk to VM2</test_name>
   <test_action>attachDiskToVm</test_action>
   <parameters>alias='floating', vmName='vm_test2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>854479</bz>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='floating'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<!-- TODO" Inner disk testing -->
<test_case>
   <test_name>Detach disk from first VM</test_name>
   <test_action>detachDiskFromVm</test_action>
   <parameters>alias='floating', vmName='vm_test2'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='floating'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVms</test_action>
   <parameters>vms='vm_test1,vm_test2'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test1', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test2', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test2'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove floating disk</test_name>
   <test_action>deleteDisk</test_action>
   <parameters>alias="floating"</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait until disk is gone</test_name>
   <test_action>waitForDisksGone</test_action>
   <parameters>disksNames="floating"</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<!--TODO: better checking -->
<test_case>
   <test_name>Sleep a bit</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>no</report>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_sanity_31_dc', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='storage_sanity_31_dc'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='storage_sanity_31_cluster'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:FloatingDisk</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>

<test_case>
   <test_name>START_GROUP:SharedRAWDisk</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>WORKAROUND FOR BZ#842257</test_name>
   <test_action>runMachineCommand</test_action>
   <parameters>ip='{vds}', user='root', password='{vds_password}', cmd="dmsetup remove_all"</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='storage_sanity_31_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='storage_sanity_31_cluster', cpu='{cpu_name}', data_center='storage_sanity_31_dc', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='storage_sanity_31_cluster', wait='true'</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='storage_sanity_31_dc', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='storage_sanity_31_dc'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM 1</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test1', description='a', cluster='storage_sanity_31_cluster', storagedomain='master_sd', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test1', size=6442450944, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test1', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test1', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM 2</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test2', description='a', cluster='storage_sanity_31_cluster', storagedomain='master_sd', os_type='e{rhel6x64}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test2', size=6442450944, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test2', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test2', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till installation starts</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test1',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test2',nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address 1</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test1', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address 2</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test2', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create shared RAW disk</test_name>
   <test_action>addDisk</test_action>
   <parameters>alias='shared', provisioned_size=1073741824, size=1073741824, interface='e{interface_virtio}', format='e{format_raw}', storagedomain='master_sd', shareable=True, sparse=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till disk is created</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='shared'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach disk to VM1</test_name>
   <test_action>attachDiskToVm</test_action>
   <parameters>alias='shared', vmName='vm_test1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>854479</bz>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='shared'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach disk to VM2</test_name>
   <test_action>attachDiskToVm</test_action>
   <parameters>alias='shared', vmName='vm_test2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>854479</bz>
</test_case>
<test_case>
   <test_name>Wait till disk is active</test_name>
   <test_action>waitForDisksState</test_action>
   <parameters>disksNames='shared'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<!-- TODO" Inner disk testing -->
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVms</test_action>
   <parameters>vms='vm_test1,vm_test2'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test1', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test2', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test2'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove shared disk</test_name>
   <test_action>deleteDisk</test_action>
   <parameters>alias="shared"</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait until disk is gone</test_name>
   <test_action>waitForDisksGone</test_action>
   <parameters>disksNames="shared"</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='storage_sanity_31_dc', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='storage_sanity_31_dc'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='storage_sanity_31_cluster'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:SharedRAWDisk</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>
</input>
