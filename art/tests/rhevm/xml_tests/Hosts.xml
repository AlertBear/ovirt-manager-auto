<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="table.xslt"?>
<input>
<test_case>
   <test_name>START_GROUP: set-up</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create Default Data Center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='DefaultRest',storage_type='e{storage_type_nfs}',version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create Cluster With Default Parameters</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='RestCluster1',cpu='{cpu_name}',data_center='DefaultRest',version='{compatibility_version}',on_error='migrate'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create New Host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='RestCluster1', wait=False, vdcPort='{port}'</parameters>
   <positive>TRUE</positive>
   <vital>TRUE</vital>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create Second Host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[1]}', root_password='{vds_password[1]}', cluster='RestCluster1', wait=False</parameters>
   <positive>TRUE</positive>
   <vital>TRUE</vital>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Wait for host is UP</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <vital>TRUE</vital>
   <run>if(not 1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Wait for all hosts are UP</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}, {vds[1]}'</parameters>
   <positive>TRUE</positive>
   <vital>TRUE</vital>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Stop host with no pm configured</test_name>
   <test_action>fenceHost</test_action>
   <parameters>host='{vds[1]}', fence_type='e{fence_type_stop}'</parameters>
   <positive>FALSE</positive>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>END_GROUP: set-up</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Stop vdsmd on the host</test_name>
   <test_action>stopVdsmd</test_action>
   <parameters>vds='{vds[1]}', password='{vds_password[1]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
  <test_name>Check for file created by vdsm-stop hook</test_name>
  <test_action>checkForFileExistenceAndContent</test_action>
  <parameters>ip='{vds[1]}',password='{vds_password[1]}',filename='/tmp/vdsm-stopped'</parameters>
  <positive>NONE</positive>
  <run>yes</run>
</test_case>
<test_case>
   <test_name>Start vdsmd on the host</test_name>
   <test_action>startVdsmd</test_action>
   <parameters>vds='{vds[1]}', password='{vds_password[1]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
  <test_name>Check for file created by vdsm-start hook</test_name>
  <test_action>checkForFileExistenceAndContent</test_action>
  <parameters>ip='{vds[1]}',password='{vds_password[1]}',filename='/tmp/vdsm-running'</parameters>
  <positive>NONE</positive>
  <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: set-up</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Sleep</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=10</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create Data Storage Domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='DataDomainRest',type='e{storage_dom_type_data}',storage_type='e{storage_type_nfs}',address='{data_domain_address}',host='{vds[1]}',path='{data_domain_path}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Attach Data Storage Domain to Data Center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='DefaultRest',storagedomain='DataDomainRest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: set-up</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: set-up</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_action>addVm</test_action>
   <parameters>name='rest_vm_rhel', description='Rest VM', cluster='RestCluster1', display_type='{display_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Update VM Affinity</test_name>
   <test_action>updateVm</test_action>
   <parameters>vm='rest_vm_rhel', placement_host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add RAW VIRTIO Data Disk To VM</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='rest_vm_rhel',size=3221225472,storagedomain='DataDomainRest',type='e{disk_type_system}',format='e{format_raw}',interface='e{interface_ide}',bootable='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add NIC to VM to allow boot</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='rest_vm_rhel', name='nic1', network='rhevm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Temporarily disable SELinux on the host (BZ 729365)</test_name>
   <test_action>setSELinuxEnforce</test_action>
   <parameters>address='{vds[1]}',password='{vds_password[0]}',enforce='0'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='rest_vm_rhel', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: set-up</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: power-management</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create VM With High Availibility</test_name>
   <test_action>addVm</test_action>
   <parameters>name='restvm_high', cluster='RestCluster1', type='e{vm_type_server}', highly_available='true', placement_affinity='migratable', placement_host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM With Default Parameters</test_name>
   <test_action>addVm</test_action>
   <parameters>name='restvm', cluster='RestCluster1', placement_affinity='migratable', placement_host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add RAW IDE System Disk To VM not preallocated</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='restvm_high', size=2147483648, type='e{disk_type_system}', format='e{format_raw}', interface='e{interface_ide}', sparse='true', storagedomain='DataDomainRest',bootable='true'</parameters>
   <positive>TRUE</positive>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Add RAW IDE System Disk To VM not preallocated</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='restvm', size=2147483648, type='e{disk_type_system}', format='e{format_raw}', interface='e{interface_ide}', sparse='true', storagedomain='DataDomainRest',bootable='true'</parameters>
   <positive>TRUE</positive>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Add NIC to VM to allow boot</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='restvm_high', name='nic1', network='rhevm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add NIC to VM to allow boot</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='restvm', name='nic1', network='rhevm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='restvm_high', wait_for_status='e{vm_state_up}'</parameters>
   <positive>TRUE</positive>
   <run>If(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='restvm', wait_for_status='e{vm_state_up}'</parameters>
   <positive>TRUE</positive>
   <run>If(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Configure power management with wrong fencing device type</test_name>
   <test_action>updateHost</test_action>
   <parameters>host='{vds[0]}', pm='true', pm_type='wrong_type', pm_address='{pm_address}', pm_username='{pm_username}', pm_password='{pm_password}'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Configure power management with no password</test_name>
   <test_action>updateHost</test_action>
   <parameters>host='{vds[0]}', pm='true', pm_type='{pm_type}', pm_address='{pm_address}', pm_username='{pm_username}'</parameters>
   <positive>FALSE</positive>
   <run>no</run>
 </test_case>
<test_case>
   <test_name>Configure power management for the host</test_name>
   <test_action>updateHost</test_action>
   <parameters>host='{vds[0]}', pm='true', pm_type='{pm_type}', pm_address='{pm_address}', pm_username='{pm_username}', pm_password='{pm_password}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check time elapsed from previous PM operation</test_name>
   <test_action>waitForHostPmOperation</test_action>
   <parameters>host='{vds[0]}',vdc='{vdc}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Fence host</test_name>
   <test_action>fenceHost</test_action>
   <parameters>host='{vds[0]}', fence_type='e{fence_type_restart}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check for status of highly available vm</test_name>
   <test_action>checkVmState</test_action>
   <parameters>vmName='restvm_high', host='{vds[1]}', state='e{vm_state_up}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check for status of vm</test_name>
   <test_action>checkVmState</test_action>
   <parameters>vmName='restvm', state='e{vm_state_down}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all hosts are UP</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}, {vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Stop vdsmd on the host</test_name>
   <test_action>stopVdsmd</test_action>
   <parameters>vds='{vds[0]}', password='{vds_password[0]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for host to be rebooted</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}', states='e{host_state_reboot}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for host is UP</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop vdsmd on the host</test_name>
   <test_action>stopVdsmd</test_action>
   <parameters>vds='{vds[1]}', password='{vds_password[1]}'</parameters>
   <positive>NONE</positive>
   <run>no</run>
</test_case>
<test_case>
   <test_name>SSH reboot host</test_name>
   <test_action>rebootHost</test_action>
   <parameters>host='{vds[1]}', username='root', password='{vds_password[1]}'</parameters>
   <positive>TRUE</positive>
   <run>no</run>
</test_case>
<!-- at this point all hosts should be up -->
<test_case>
   <test_name>Set Active Host To Maintenance</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check time elapsed from previous PM operation</test_name>
   <test_action>waitForHostPmOperation</test_action>
   <parameters>host='{vds[0]}',vdc='{vdc}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop host</test_name>
   <test_action>fenceHost</test_action>
   <parameters>host='{vds[0]}', fence_type='e{fence_type_stop}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: power-management</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='rest_vm_rhel', timeout=1200, sleep=10</parameters>
   <positive>NONE</positive>
   <run>YES</run>
 </test_case>
<test_case>
   <test_name>Prepare machine for template creation</test_name>
   <test_action>setPersistentNetwork</test_action>
   <parameters>vmName='rest_vm_rhel',user='{vm_username}',password='{vm_password}',eths='ifcfg-eth0'</parameters>
   <positive>NONE</positive>
   <run>no</run>
 </test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='rest_vm_rhel'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create Template From VM</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='rest_vm_rhel',name='domain_template',cluster='RestCluster1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM From Template</test_name>
   <test_action>addVm</test_action>
   <parameters>name='template_vm',custom_properties='fileinject=/vdsm_hook_test:vdsm_hook_test_content',disk_clone='true',cluster='RestCluster1',template='domain_template',storagedomain='DataDomainRest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Sleep</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=150</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='rest_vm_rhel'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='template_vm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='template_vm', timeout=1200, sleep=10</parameters>
   <positive>NONE</positive>
   <run>YES</run>
 </test_case>
<test_case>
  <test_name>Check for file created by vdsm fileinject hook</test_name>
  <test_action>checkForFileExistenceAndContentOnVm</test_action>
  <bz>864991</bz>
  <parameters>vmName='template_vm',password='{vm_password}',filename='/vdsm_hook_test',content='vdsm_hook_test_content',user='{vm_username}'</parameters>
  <positive>NONE</positive>
  <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: power-management</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Check time elapsed from previous PM operation</test_name>
   <test_action>waitForHostPmOperation</test_action>
   <parameters>host='{vds[0]}',vdc='{vdc}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Start host</test_name>
   <test_action>fenceHost</test_action>
   <parameters>host='{vds[0]}', fence_type='e{fence_type_start}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='restvm_high'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: power-management</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='template_vm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='rest_vm_rhel'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove Vms</test_name>
   <test_action>removeVms</test_action>
   <parameters>vms='rest_vm_rhel template_vm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: power-management</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Remove Vms</test_name>
   <test_action>removeVms</test_action>
   <parameters>vms='restvm restvm_high'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: power-management</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Sleep</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=10</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>START_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Remove Template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='domain_template'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: vdsm-hooks</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>START_GROUP: cleanup</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Deactivate Master Storage Domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='DefaultRest', storagedomain='DataDomainRest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove Data Centers</test_name>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='DefaultRest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove Master Storage Domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='DataDomainRest', host='{vds[0]}',format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Set Active Host To Maintenance</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Remove Inactive Host</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if(1&lt;len('[vds]'.split(',')))</run>
</test_case>
<test_case>
   <test_name>Set Active Host To Maintenance</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove Inactive Host</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove Clusters</test_name>
   <test_action>removeClusters</test_action>
   <parameters>clusters='RestCluster1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
 </test_case>
<test_case>
   <test_name>END_GROUP: cleanup</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
 <test_case>
   <test_name>Check xsd schema validations</test_name>
   <test_action>checkResponsesAreXsdValid</test_action>
   <parameters/>
   <positive>NONE</positive>
   <run>yes</run>
 </test_case>
</input>
