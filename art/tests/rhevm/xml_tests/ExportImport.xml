<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set ts=3 sw=3 expandtab: -->
<?xml-stylesheet type="text/xsl" href="table.xslt"?>
<input>
<test_case>
   <test_name>START_GROUP: Setup</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create NFS data center</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]',cpuName='{cpu_name}',username='root',password='[vds_password]',datacenter='{data_center_type}StorageTest',storage_type='e{storage_type_nfs}',cluster='{data_center_type}StorageTest',address='[data_domain_address]',dataStorageDomains='[data_domain_path]',version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create iSCSI data center</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]',cpuName='{cpu_name}',username='root',password='[vds_password]',datacenter='{data_center_type}StorageTest',storage_type='e{storage_type_iscsi}',cluster='{data_center_type}StorageTest',lun_address='[lun_address]',lun_target='[lun_target]',luns='[lun]',lun_port=3260,version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create FCP data center</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]',cpuName='{cpu_name}',username='root',password='[vds_password]',datacenter='{data_center_type}StorageTest',storage_type='e{storage_type_fcp}',cluster='{data_center_type}StorageTest',luns='[lun]',version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iscsi discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}',address='{export_lun_address}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>iscsi login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}',address='{export_lun_address}',target='{export_lun_target}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create NFS export storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='ImpExp_{data_center_type}',type='e{storage_dom_type_export}',storage_type='e{storage_type_nfs}',address='{export_domain_address}',host='{vds[0]}',path='{export_domain_path}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create iSCSI export storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='ImpExp_{data_center_type}',type='e{storage_dom_type_export}',storage_type='e{storage_type_iscsi}',lun_address='{export_lun_address}',lun_target='{export_lun_target}',lun='{export_lun}',lun_port=3260,host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create FCP export storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='ImpExp_{data_center_type}',type='e{storage_dom_type_export}',storage_type='e{storage_type_fcp}',lun='{export_lun}',host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Attach export storage domain to data center '{data_center_type}'</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='{data_center_type}StorageTest',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Activate export storage domain '{data_center_type}'</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='{data_center_type}StorageTest',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create shared ISO domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='{shared_iso_domain_name}',type='e{storage_dom_type_iso}',storage_type='e{storage_type_nfs}',address='{shared_iso_domain_address}',host='{vds[0]}',path='{shared_iso_domain_path}', storage_format='v1'</parameters>
   <positive>TRUE</positive>
   <run>ifaction(checkIfStorageDomainExist,False,'{shared_iso_domain_name}')</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Attach shared ISO domain to data center '{data_center_type}'</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='{data_center_type}StorageTest',storagedomain='{shared_iso_domain_name}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Activate shared ISO storage domain '{data_center_type}'</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='{data_center_type}StorageTest',storagedomain='{shared_iso_domain_name}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: Setup</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: Prepare_Test_Templates</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Convert OS name to OS type element '{data_center_type}'</test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>osTypeElement-&gt;osTypeElement{data_center_type}</fetch_output>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create VM with RHEL OS '{data_center_type}'</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{data_center_type}TestVm',vmDescription='{data_center_type}TestVM',cluster='{data_center_type}StorageTest',nic='{host_nics[0]}',nicType='e{nic_type_virtio}',storageDomainName='{data_center_type}StorageTest_data_domain0',size=21474836480,diskType='e{disk_type_system}',volumeFormat='e{format_cow}',diskInterface='e{interface_ide}',bootable='true',wipe_after_delete='false',start='false',type='e{vm_type_server}',os_type=%osTypeElement{data_center_type}%,memory=1073741824,cpu_socket=1,cpu_cores=1,display_type='e{display_type_spice}',installation=True,slim='true',user='{vm_linux_user}',password='{vm_linux_password}',cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',image="{cobbler_profile}",network='{mgmt_bridge}',useAgent={useAgent}</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement{data_center_type}%))</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create VM with Win OS '{data_center_type}'</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{data_center_type}TestVm',vmDescription='{data_center_type}TestVm',cluster='{data_center_type}StorageTest',nic='{host_nics[0]}',nicType='e{nic_type_virtio}',storageDomainName='{data_center_type}StorageTest_data_domain0',size=21474836480,diskType='e{disk_type_system}',volumeFormat='e{format_cow}',diskInterface='e{interface_ide}',bootable='true',wipe_after_delete='false',start='false',type='e{vm_type_desktop}',os_type=%osTypeElement{data_center_type}%,memory=1073741824,cpu_socket=1,cpu_cores=1,display_type='e{display_type_spice}',installation=True,slim='true',user='{vm_windows_user}',password='{vm_windows_password}',cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',network='{mgmt_bridge}',useAgent={useAgent}</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('Win',%osTypeElement{data_center_type}%))</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Get mac address '{data_center_type}'</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{data_center_type}TestVm',nic='{host_nics[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddress{data_center_type}</fetch_output>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Stop running VM to create template '{data_center_type}'</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{data_center_type}TestVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create template '{data_center_type}'</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='{data_center_type}TestVm',name='{data_center_type}TestTempl',cluster='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>END_GROUP:Prepare_Test_Templates</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: Positive_and_Negative_test_testCase_exportImport</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from template '{data_center_type}'</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{data_center_type}TemplVm',template='{data_center_type}TestTempl',cluster='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
    <test_name>Wait till vm is down</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{data_center_type}TemplVm', timeout=120, states='e{vm_state_down}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Try to export VMs only to data domain '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',storagedomain='{data_center_type}StorageTest_data_domain0'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Try to export VMs only to ISO domain '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',storagedomain='{shared_iso_domain_name}'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Export VM '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <bz>882632</bz>
</test_case>
<test_case>
   <test_name>checkVmVolume after VMs export '{data_center_type}'</test_name>
   <test_action>checkVmVolume</test_action>
   <parameters>vdsName='{vds[0]}', username='root', passwd='{vds_password[0]}', dataCenter='{data_center_type}StorageTest', storageDomain='ImpExp_{data_center_type}', vm='{data_center_type}TemplVm', fake=True, noImages=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <bz>882632</bz>
</test_case>
<test_case>
   <test_name>Remove VMs from export domain '{data_center_type}'</test_name>
   <test_action>removeVmFromExportDomain</test_action>
   <parameters>vm='{data_center_type}TemplVm',datacenter='{data_center_type}StorageTest',export_storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>882632</bz>
</test_case>
<test_case>
   <test_name>checkVmVolume after VMs removal from export domain '{data_center_type}'</test_name>
   <test_action>checkVmVolume</test_action>
   <parameters>vdsName='{vds[0]}', username='root', passwd='{vds_password[0]}', dataCenter='{data_center_type}StorageTest', storageDomain='ImpExp_{data_center_type}', vm='{data_center_type}TemplVm',fake=True, noImages=True, exists=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Export VM after VMs removal from export domain '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>882632</bz>
</test_case>
<test_case>
   <test_name>checkVmVolume after the second VM export '{data_center_type}'</test_name>
   <test_action>checkVmVolume</test_action>
   <parameters>vdsName='{vds[0]}', username='root', passwd='{vds_password[0]}', dataCenter='{data_center_type}StorageTest', storageDomain='ImpExp_{data_center_type}', vm='{data_center_type}TemplVm', fake=True, noImages=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <bz>882632</bz>
</test_case>
<test_case>
   <test_name>Export template '{data_center_type}'</test_name>
   <test_action>exportTemplate</test_action>
   <parameters>template='{data_center_type}TestTempl',storagedomain='ImpExp_{data_center_type}', wait=True</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>checkTemplateVolume after template export '{data_center_type}'</test_name>
   <test_action>checkTemplateVolume</test_action>
   <parameters>vdsName='{vds[0]}', username='root', passwd='{vds_password[0]}', dataCenter='{data_center_type}StorageTest', storageDomain='ImpExp_{data_center_type}',template='{data_center_type}TestTempl', fake=False, noImages=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>868634</bz>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Export VM after template export '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <fetch_output/>
   <bz>882632</bz>
</test_case>
<test_case>
   <test_name>Wait for VM's down status '{data_center_type}'</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{data_center_type}TemplVm', states='e{vm_state_down}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM after template export '{data_center_type}'</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove template '{data_center_type}'</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='{data_center_type}TestTempl'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported template '{data_center_type}'</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{data_center_type}TestTempl',import_storagedomain='{data_center_type}StorageTest_data_domain0',export_storagedomain='ImpExp_{data_center_type}',cluster='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM after VM removal '{data_center_type}'</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',import_storagedomain='{data_center_type}StorageTest_data_domain0',export_storagedomain='ImpExp_{data_center_type}',cluster='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import already exported template '{data_center_type}'</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{data_center_type}TestTempl',import_storagedomain='{data_center_type}StorageTest_data_domain0',export_storagedomain='ImpExp_{data_center_type}',cluster='{data_center_type}StorageTest'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import the same template with different name</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{data_center_type}TestTempl', import_storagedomain='{data_center_type}StorageTest_data_domain0', export_storagedomain='ImpExp_{data_center_type}', cluster='{data_center_type}StorageTest', name='{data_center_type}TestTempl2'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <bz>853045</bz>
</test_case>
<test_case>
   <test_name>Wait till template is imported</test_name>
   <test_action>waitForTemplatesStates</test_action>
   <parameters>names='{data_center_type}TestTempl2', timeout=7200</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Import already exported VM '{data_center_type}'</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',import_storagedomain='{data_center_type}StorageTest_data_domain0',export_storagedomain='ImpExp_{data_center_type}',cluster='{data_center_type}StorageTest'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM '{data_center_type}' with different name</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TemplVm', import_storagedomain='{data_center_type}StorageTest_data_domain0', export_storagedomain='ImpExp_{data_center_type}', cluster='{data_center_type}StorageTest', name='{data_center_type}Vm2'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <bz>864073</bz>
</test_case>
<test_case>
   <test_name>Wait for imported VM</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{data_center_type}Vm2', timeout=7200, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <bz>864073</bz>
</test_case>
<test_case>
   <test_name>Start imported VM 2 '{data_center_type}'</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <bz>864073</bz>
</test_case>
<test_case>
   <test_name>Start exported VM '{data_center_type}'</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP:Positive_and_Negative_test_testCase_exportImport</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: Positive_test_testCase_exportImportForceOverride</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop running VM 2 to test force override option '{data_center_type}'</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <bz>864073</bz>
</test_case>
<test_case>
   <test_name>Stop running VM to test force override option '{data_center_type}'</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Add 3G COW IDE data disk to VM to test force override option '{data_center_type}'</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',size=3221225472,type='e{disk_type_data}',interface='e{interface_ide}',sparse='true',format='e{format_cow}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Export VM with force override option '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',storagedomain='ImpExp_{data_center_type}',exclusive='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM 2 after exporting it with force override option '{data_center_type}'</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <bz>864073</bz>
</test_case>
<test_case>
   <test_name>Remove VM after exporting it with force override option '{data_center_type}'</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM with force override option '{data_center_type}'</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',import_storagedomain='{data_center_type}StorageTest_data_domain0',export_storagedomain='ImpExp_{data_center_type}',cluster='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM with force override option '{data_center_type}' and different name</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TemplVm', import_storagedomain='{data_center_type}StorageTest_data_domain0', export_storagedomain='ImpExp_{data_center_type}', cluster='{data_center_type}StorageTest', name='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Start imported VM with force override option '{data_center_type}' and different name</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <bz>864073</bz>
</test_case>
<test_case>
   <test_name>Start exported VM with force override option '{data_center_type}'</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP:Positive_test_testCase_exportImportForceOverride</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: Positive_test_testCase_exportImportCollapseSnapshot</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VMs from export domain to test export with collapse snapshots option '{data_center_type}'</test_name>
   <test_action>removeVmFromExportDomain</test_action>
   <parameters>vm='{data_center_type}TemplVm',datacenter='{data_center_type}StorageTest',export_storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop running VM to test collapse snapshots option '{data_center_type}'</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop running VM 2 to test collapse snapshots option '{data_center_type}'</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM 2 with collapse snapshots option '{data_center_type}'</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Add 3G COW IDE data disk to VM to test collapse snapshots option '{data_center_type}'</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',size=3221225472,type='e{disk_type_data}',interface='e{interface_ide}',sparse='true',format='e{format_cow}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Export VM with collapse snapshots option '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',storagedomain='ImpExp_{data_center_type}',discard_snapshots='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM after exporting it with collapse snapshots option '{data_center_type}'</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM with collapse snapshots option '{data_center_type}'</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TemplVm',import_storagedomain='{data_center_type}StorageTest_data_domain0',export_storagedomain='ImpExp_{data_center_type}',cluster='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM with collapse snapshots option '{data_center_type}' and different name</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TemplVm', import_storagedomain='{data_center_type}StorageTest_data_domain0', export_storagedomain='ImpExp_{data_center_type}', cluster='{data_center_type}StorageTest', name='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Start exported VM with collapse snapshots option '{data_center_type}'</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}TemplVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Start exported VM 2 with collapse snapshots option '{data_center_type}'</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: Positive_test_testCase_exportImportCollapseSnapshot</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: Positive_test_testCase_exportImportVmFromBlank</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Export VMs only '{data_center_type}'</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{data_center_type}TestVm',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop running VM 2 '{data_center_type}'</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Remove VM '{data_center_type}' </test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{data_center_type}TestVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM 2 '{data_center_type}' </test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM '{data_center_type}'</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TestVm',import_storagedomain='{data_center_type}StorageTest_data_domain0',export_storagedomain='ImpExp_{data_center_type}',cluster='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM '{data_center_type}' with different name</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{data_center_type}TestVm', import_storagedomain='{data_center_type}StorageTest_data_domain0', export_storagedomain='ImpExp_{data_center_type}', cluster='{data_center_type}StorageTest', name='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Start imported VM 2 '{data_center_type}'</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}Vm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Start exported VMs '{data_center_type}'</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{data_center_type}TestVm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP:Positive_test_testCase_exportImportVmFromBlank</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: CleanUp</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clean data center '{data_center_type}'</test_name>
   <test_action>cleanDataCenter</test_action>
   <parameters>datacenter='{data_center_type}StorageTest'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>CleanUp:Remove system from Cobbler '{data_center_type}'</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}',mac=%macAddress{data_center_type}%</parameters>
   <positive>NONE</positive>
   <run>if(re.search('RHEL',%osTypeElement{data_center_type}%))</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: CleanUp</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
</input>
