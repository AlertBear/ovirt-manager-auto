<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set ts=3 sw=3 expandtab: -->
<?xml-stylesheet type="text/xsl" href="table.xslt"?>

<input>
<test_case>
   <test_name>Create NFS Data Center</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]', cpuName='{cpu_name}', username='root', password='[vds_password]', datacenter='{data_center_type}VmTest', storage_type='e{storage_type_nfs}', cluster='{data_center_type}{cluster_name}', address='[data_domain_address]', dataStorageDomains='[data_domain_path]', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>YES</report>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create ISCSI Data Center</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]', cpuName='{cpu_name}', username='root', password='[vds_password]', datacenter='{data_center_type}VmTest', storage_type='e{storage_type_iscsi}', cluster='{data_center_type}{cluster_name}', lun_address='[lun_address]', lun_target='[lun_target]', luns='[lun]', lun_port=3260, version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>YES</report>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create FCP Data Center</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]', cpuName='{cpu_name}', username='root', password='[vds_password]', datacenter='{data_center_type}VmTest', storage_type='e{storage_type_fcp}', cluster='{data_center_type}{cluster_name}', luns='[lun]', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>YES</report>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Convert Os name to Os type element </test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>osTypeElement-&gt;osTypeElement</fetch_output>
</test_case>
<test_case>
   <test_name>START_GROUP: create_vm_sparse_cow_virtio</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from blank template add disk and install OS</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{vm_name}_{data_center_type}_virtio', vmDescription='{vm_name}_{data_center_type}_prep', cluster='{data_center_type}{cluster_name}', nic='{host_nics[0]}', storageDomainName='{data_center_type}VmTest_data_domain0', size={disk_size}, diskType='e{disk_type_system}', volumeType='true', volumeFormat='cow', diskInterface='e{interface_virtio}', bootable='true', wipe_after_delete='false', start='false', memory=1073741824, cpu_socket='{cpu_socket}', cpu_cores='{cpu_cores}', nicType='e{nic_type_virtio}', display_type='{display_type}', os_type=%osTypeElement%, user='{vm_linux_user}', password='{vm_linux_password}', type='e{vm_type_desktop}', installation=True, slim=True, cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', network='{mgmt_bridge}', useAgent={useAgent}</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_virtio', nic='{host_nics[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', mac=%macAddress%</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_virtio'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Remove the source VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_virtio'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>END_GROUP: create_vm_sparse_cow_virtio</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: prepare_source_vms_sparse_cow</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from blank template add disk and install OS</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{vm_name}_{data_center_type}_prep', vmDescription='{vm_name}_{data_center_type}_prep', cluster='{data_center_type}{cluster_name}', nic='{host_nics[0]}', storageDomainName='{data_center_type}VmTest_data_domain0', size={disk_size}, diskType='e{disk_type_system}', volumeType='true', volumeFormat='cow', diskInterface='e{interface_ide}', bootable='true', wipe_after_delete='false', start='false', memory=1073741824, cpu_socket='{cpu_socket}', cpu_cores='{cpu_cores}', nicType='e{nic_type_virtio}', display_type='{display_type}', os_type=%osTypeElement%, user='{vm_linux_user}', password='{vm_linux_password}', type='e{vm_type_desktop}', installation=True, slim=True, cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', network='{mgmt_bridge}', useAgent={useAgent}</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep', nic='{host_nics[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', mac=%macAddress%</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create template from VM</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep', name='{template_name}_{data_center_type}', cluster='{data_center_type}{cluster_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove the source VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: clone_vms_sparse_cow</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from template</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_thin', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', timeout=600</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_thin'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_clone', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_clone', sparse=True, format='COW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_clone'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template with image converting</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_conv1', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900, vol_sparse='true', vol_format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv1', sparse=True, format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv1'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template with image converting</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_conv2', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900, vol_sparse='false', vol_format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv2', sparse=False, format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv2'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='{template_name}_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: clone_vms_sparse_cow</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: prepare_source_vms_sparse_cow</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: prepare_source_vms_sparse_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from blank template add disk and install OS</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{vm_name}_{data_center_type}_prep', vmDescription='{vm_name}_{data_center_type}_prep', cluster='{data_center_type}{cluster_name}', nic='{host_nics[0]}', storageDomainName='{data_center_type}VmTest_data_domain0', size={disk_size}, diskType='e{disk_type_system}', volumeType='true', volumeFormat='raw', diskInterface='e{interface_ide}', bootable='true', wipe_after_delete='false', start='false', memory=1073741824, cpu_socket='{cpu_socket}', cpu_cores='{cpu_cores}', nicType='e{nic_type_virtio}', display_type='{display_type}', os_type=%osTypeElement%, user='{vm_linux_user}', password='{vm_linux_password}', type='e{vm_type_desktop}', installation=True, slim=True, cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', network='{mgmt_bridge}', useAgent={useAgent}</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep', nic='{host_nics[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', mac=%macAddress%</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create template from VM</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep', name='{template_name}_{data_center_type}', cluster='{data_center_type}{cluster_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove the source VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: clone_vms_sparse_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from template</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_thin', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', timeout=600</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_thin'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_clone', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_clone', sparse=True, format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_clone'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template with image converting</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_conv1', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900, vol_sparse='true', vol_format='COW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv1', sparse=True, format='COW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv1'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template with image converting</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_conv2', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900, vol_sparse='false', vol_format='COW'</parameters>
   <positive>FALSE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='{template_name}_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: clone_vms_sparse_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: prepare_source_vms_sparse_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: prepare_source_vms_preallocated_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from blank template add disk and install OS</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{vm_name}_{data_center_type}_prep', vmDescription='{vm_name}_{data_center_type}_prep', cluster='{data_center_type}{cluster_name}', nic='{host_nics[0]}', storageDomainName='{data_center_type}VmTest_data_domain0', size={prealloc_disk_size}, diskType='e{disk_type_system}', volumeType='false', volumeFormat='raw', diskInterface='e{interface_ide}', bootable='true', wipe_after_delete='false', start='false', memory=1073741824, cpu_socket='{cpu_socket}', cpu_cores='{cpu_cores}', nicType='e{nic_type_virtio}', display_type='{display_type}', os_type=%osTypeElement%, user='{vm_linux_user}', password='{vm_linux_password}', type='e{vm_type_desktop}', installation=True, slim=True, cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', network='{mgmt_bridge}', useAgent={useAgent}</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep', nic='{host_nics[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', mac=%macAddress%</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create template from VM</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep', name='{template_name}_{data_center_type}', cluster='{data_center_type}{cluster_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove the source VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_prep'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: clone_vms_preallocated_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from template</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_thin', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', timeout=900</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_thin'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_clone', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_clone', sparse=False, format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_clone'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template with image converting</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_conv1', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900, vol_sparse='true', vol_format='COW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv1', sparse=True, format='COW'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv1'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clone VM from template with image converting</test_name>
   <test_action>cloneVmFromTemplate</test_action>
   <parameters>name='{vm_name}_{data_center_type}_conv2', cluster='{data_center_type}{cluster_name}', template='{template_name}_{data_center_type}', clone='true', timeout=900, vol_sparse='true', vol_format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate VM disks allocation type and format</test_name>
   <test_action>validateVmDisks</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv2', sparse=True, format='RAW'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_conv2'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='{template_name}_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: clone_vms_preallocated_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: prepare_source_vms_preallocated_raw</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Convert Os name to Os type element </test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>osTypeElement-&gt;osTypeElement</fetch_output>
</test_case>
<test_case>
   <test_name>START_GROUP: prepare_vm</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from blank template add disk and install OS</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{vm_name}_{data_center_type}_snap', vmDescription='{vm_name}_{data_center_type}_snap', cluster='{data_center_type}{cluster_name}', nic='{host_nics[0]}', storageDomainName='{data_center_type}VmTest_data_domain0', size={disk_size}, diskType='e{disk_type_system}', volumeType='true', volumeFormat='cow', diskInterface='e{interface_ide}', bootable='true', wipe_after_delete='false', start='false', memory=1073741824, cpu_socket='{cpu_socket}', cpu_cores='{cpu_cores}', nicType='e{nic_type_virtio}', display_type='{display_type}', os_type=%osTypeElement%, user='{vm_linux_user}', password='{vm_linux_password}', type='e{vm_type_desktop}', installation=True, slim=True, cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', network='{mgmt_bridge}', useAgent={useAgent}</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', nic='{host_nics[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', mac=%macAddress%</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddress%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Wait for VM up status</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name}_{data_center_type}_snap'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='{data_root_dir}', root_name_prefix='snap', dir_cnt='{data_dir_cnt}', file_cnt='{data_file_cnt}'</parameters>
   <positive>NONE</positive>
   <run>Loop(6)</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path#loop_index</fetch_output>
</test_case>
<test_case>
   <test_name>END_GROUP: prepare_vm</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: create_two_snapshots_with_data_delta</test_name>
   <test_action/>
   <parameters>N/A</parameters>
   <positive>NONE</positive>
   <run>Loop(2)</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path#loop_index%, dest='{dest_dir}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>shutdownVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name}_{data_center_type}_snap', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_action>addSnapshot</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', description='snap#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: create_two_snapshots_with_data_delta</test_name>
   <test_action/>
   <parameters>N/A</parameters>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: delete_snapshots_and_validate_data</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>shutdownVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name}_{data_center_type}_snap', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Delete the last(second) snapshot</test_name>
   <test_action>removeSnapshot</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', description='snap1', timeout=600</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', wait_for_status='up', wait_for_ip=True</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='{dest_dir}', destToCompare=%data_path#loop_index%</parameters>
   <positive>NONE</positive>
   <run>Loop(2)</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>shutdownVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name}_{data_center_type}_snap', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Delete the first snapshot</test_name>
   <test_action>removeSnapshot</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', description='snap0', timeout=600</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', wait_for_status='up', wait_for_ip=True</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='{dest_dir}', destToCompare=%data_path#loop_index%</parameters>
   <positive>NONE</positive>
   <run>Loop(2)</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: delete_snapshots_and_validate_data</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: create_three_more_snapshots</test_name>
   <test_action/>
   <parameters>N/A</parameters>
   <positive>NONE</positive>
   <run>Loop(2-5)</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path#loop_index%, dest='{dest_dir}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>shutdownVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name}_{data_center_type}_snap', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_action>addSnapshot</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', description='snap#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: create_three_more_snapshots</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: delete_oldest_snapshot_and_validate_data</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>shutdownVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name}_{data_center_type}_snap', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Delete the oldest snapshot</test_name>
   <test_action>removeSnapshot</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', description='snap2', timeout=600</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', wait_for_status='up', wait_for_ip=True</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='{dest_dir}', destToCompare=%data_path#loop_index%</parameters>
   <positive>NONE</positive>
   <run>Loop(5)</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: delete_oldest_snapshot_and_validate_data</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: create_new_snapshot_and_validate_data</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path5%, dest='{dest_dir}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>shutdownVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till vm is down</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name}_{data_center_type}_snap', timeout=120, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_action>addSnapshot</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', description='snap5'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', wait_for_status='up', wait_for_ip=True</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='{dest_dir}', destToCompare=%data_path#loop_index%</parameters>
   <positive>NONE</positive>
   <run>Loop(6)</run>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: create_new_snapshot_and_validate_data</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: cleanup_vm</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Cleanup data prepared for VM</test_name>
   <test_action>cleanupData</test_action>
   <parameters>path=%data_path#loop_index%</parameters>
   <positive>NONE</positive>
   <run>Loop(6)</run>
   <report>NO</report>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}_{data_center_type}_snap', stopVM='true'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP: cleanup_vm</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <report/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Clean Data Center</test_name>
   <test_action>cleanDataCenter</test_action>
   <parameters>datacenter='{data_center_type}VmTest', formatIsoStorage='true'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
</input>
