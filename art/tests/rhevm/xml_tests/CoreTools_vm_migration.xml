<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set ts=3 sw=3 expandtab: -->
<?xml-stylesheet type="text/xsl" href="table.xslt"?>

<input pydocs="/home/jhenner/work/rest-api-tests/html_editor/docs.txt">
<test_case>
   <test_name>START_GROUP: migrations_set-up</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create Data Center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='{datacenter1_name}', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create Cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='{cluster1_name}', cpu='{cpu_name}', version='{compatibility_version}', data_center='{datacenter1_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
 <test_case>
   <test_name>Add Host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='{cluster1_name}', wait=False</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vds},{vds_password})</run>
</test_case>
<test_case>
   <test_name>Wait for all hosts are UP</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='[vds]'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <vital>true</vital>
</test_case>
<test_case>
   <test_name>iSCSI Discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}' == 'e{storage_type_iscsi}')</run>
</test_case>
<test_case>
   <test_name>iSCSI Login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address}', target='{lun_target}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}' == 'e{storage_type_iscsi}')</run>
</test_case>
<test_case>
   <test_name>Create Data Storage Domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='{storagedomain1}', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun}', lun_address='{lun_address}', lun_target='{lun_target}', lun_port=3260</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}' == 'e{storage_type_iscsi}')</run>
</test_case>
<test_case>
   <test_name>Create Data Storage Domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='{storagedomain1}', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', host='{vds[0]}', address='{data_domain_address}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}' == 'e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>Sleep to give hosts time to add the storage.</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=5</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Attach Master Data Storage Domain to Data Center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='{datacenter1_name}', storagedomain='{storagedomain1}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for SPM election complete</test_name>
   <test_action>waitForSPM</test_action>
   <parameters>datacenter='{datacenter1_name}', timeout=240, sleep=5</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Check no error events occured after SPM detected.</test_name>
   <test_action>searchForRecentEvent</test_action>
   <parameters>win_start_query='Migrations_DC type=950', query='severity>=error and type!=9000', expected_count=0</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Sleep to give hosts time to connect the storage.</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=3</parameters>
   <positive>NONE</positive>
   <run>NO</run>
</test_case>
<test_case>
   <test_name>Check no error events occured after SPM detected and sleeping.</test_name>
   <test_action>searchForRecentEvent</test_action>
   <parameters>win_start_query='Migrations_DC type=950', query='severity>=error and type!=9000', expected_count=0</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='Migrations_VM-#loop_index', vmDescription='Foo bar baz', cluster='{cluster1_name}', storageDomainName='{storagedomain1}', size=3221225472, nic='nic1', memory=536870912, cpu_cores={cpu_cores}, cpu_socket={cpu_socket}, display_type='{display_type}'</parameters>
   <positive>TRUE</positive>
   <run>loop(5)</run>
   <vital>true</vital>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='Migrations_VM-#loop_index', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor(5)</run>
</test_case>

<test_case>
   <test_name>Wait for all vms are UP</test_name>
   <test_action>waitForVmsStates</test_action>
   <description>fix it to work with dynamic range (0-4)</description>
   <parameters>names='Migrations_VM-0 Migrations_VM-1 Migrations_VM-2 Migrations_VM-3 Migrations_VM-4'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitUntilVmQuery</test_action>
   <parameters>vm='Migrations_VM-#loop_index', query='ip!=""', timeout=2400, sleep=10</parameters>
   <positive>NONE</positive>
   <run>forkfor(5)</run>
</test_case>
<test_case>
   <test_name>END_GROUP: migrations_set-up</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
</test_case>

<test_case>
   <test_name>START_GROUP: migration_negative_tests</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create Cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='{cluster2_name}', cpu='{cpu_name}', version='{compatibility_version}', data_center='{datacenter1_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create Data Center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='{datacenter2_name}', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Create Cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='{cluster3_name}', cpu='{cpu_name}', version='{compatibility_version}', data_center='{datacenter2_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>Set Host To Maintenance for Migrate VM to different Cluster</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Update Host Cluster for Migrate VM to different Cluster</test_name>
   <test_action>updateHost</test_action>
   <parameters>host='{vds[1]}', cluster='{cluster2_name}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Activate Host With New Cluster for Migrate VM to different Cluster</test_name>
   <test_action>activateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Migrate VM to different Cluster</test_name>
   <test_action>migrateVm</test_action>
   <parameters>vm='Migrations_VM-0', host='{vds[1]}'</parameters>
   <positive>FALSE</positive>
   <run>TRUE</run>
</test_case>

<test_case>
   <test_name>Set Host To Maintenance for Migrate VM to different Datacenter</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Update Host Cluster for Migrate VM to different Datacenter</test_name>
   <test_action>updateHost</test_action>
   <parameters>host='{vds[1]}', cluster='{cluster3_name}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Activate Host With New Cluster for Migrate VM to different Datacenter</test_name>
   <test_action>activateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Migrate VM to different Datacenter</test_name>
   <test_action>migrateVm</test_action>
   <parameters>vm='Migrations_VM-0', host='{vds[1]}'</parameters>
   <positive>FALSE</positive>
   <run>TRUE</run>
</test_case>
<test_case>
   <test_name>Migrate VM to same host as it is</test_name>
   <test_action>migrateVm</test_action>
   <parameters>vm='Migrations_VM-0', host='{vds[0]}'</parameters>
   <positive>FALSE</positive>
   <run>TRUE</run>
</test_case>

<test_case>
   <test_name>Set Host To Maintenance to switch back to original cluster.</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Update Host Cluster back</test_name>
   <test_action>updateHost</test_action>
   <parameters>host='{vds[1]}', cluster='{cluster1_name}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Activate Host in new Cluster</test_name>
   <test_action>activateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>


<test_case>
   <test_name>Create host overloading VMs</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='Migrations_VM-#loop_index', vmDescription='host overloading VM-#loop_index', cluster='{cluster1_name}', storageDomainName='{storagedomain1}', size=3221225472, nic='nic1', memory=536870912, cpu_cores={cpu_cores}, cpu_socket={cpu_socket}, display_type='{display_type}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor(5-15)</run>
</test_case>
<test_case>
   <test_name>Start New VMs</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='Migrations_VM-#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>loop(5-15)</run>
</test_case>
<test_case>
   <test_name>Set Host To Maintenance</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[1]}', expected_status='e{host_state_preparing_for_maintenance}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>

<test_case>
   <test_name>Wait for all VMs up</test_name>
   <test_action>waitUntilVmQuery</test_action>
   <parameters>vm='Migrations_VM-#loop_index', query='status="e{vm_state_up}"', timeout=2400, sleep=10</parameters>
   <positive>NONE</positive>
   <run>forkfor(5-15)</run>
   <bz>773276</bz>
</test_case>

<test_case>
   <test_name>Stop host overloading VMs</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='Migrations_VM-#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>forkfor(5-15)</run>
</test_case>
<test_case>
   <test_name>Wait for tasks to complete</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=20</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Remove VMs</test_name>
   <test_action>removeVms</test_action>
   <parameters>vms='Migrations_VM-5  Migrations_VM-6  Migrations_VM-7  Migrations_VM-8  Migrations_VM-9 Migrations_VM-10 Migrations_VM-11 Migrations_VM-12 Migrations_VM-13 Migrations_VM-14 Migrations_VM-15'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Switch first host to UP to undo host_state_preparing_for_maintenance</test_name>
   <test_action>activateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>END_GROUP: migration_negative_tests</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>START_GROUP: host_to_maintenance_migrations</test_name>
   <test_description>
      This will cause all VMsto move from one host to another one. This
      checks whether all VMs can fit into each of the hosts, but only in case
      of having two hosts.
   </test_description>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Switch first host to maitenance</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Switch first host to UP</test_name>
   <test_action>activateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Switch second host to maitenance</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Switch second host to UP</test_name>
   <test_action>activateHost</test_action>
   <parameters>host='{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>END_GROUP: host_to_maintenance_migrations</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>START_GROUP: pinged_offline_migrations</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>loop(2)</run>
</test_case>

<test_case>
   <test_name>Wait for tasks to complete before pinged_offline_migrations.</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=10</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>Suspend VM</test_name>
   <test_action>suspendVms</test_action>
   <parameters>vms='Migrations_VM-0 Migrations_VM-1 Migrations_VM-2 Migrations_VM-3 Migrations_VM-4'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Resume VM</test_name>
   <test_action>startVms</test_action>
   <parameters>vms='Migrations_VM-0 Migrations_VM-1 Migrations_VM-2 Migrations_VM-3 Migrations_VM-4', wait_for_status='e{vm_state_up}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>Ping resumed Vms</test_name>
   <test_action>pingVm</test_action>
   <parameters>name_vm='Migrations_VM-#loop_index'</parameters>
   <positive>NONE</positive>
   <bz>871616</bz>
   <run>forkfor(5)</run>
</test_case>

<test_case>
   <test_name>END_GROUP: pinged_offline_migrations</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
</test_case>

<test_case>
   <test_name>START_GROUP: pinged_online_migrations</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>

<test_case>
	<test_name>Restart VDSM</test_name>
	<description>work around to avoid guest's ip disappearance</description>
	<test_action>runMachineCommand</test_action>
	<parameters>ip='{vds}', user='root', password='{vds_password}', cmd="service vdsmd restart"</parameters>
	<positive>TRUE</positive>
	<run>forkfor({vds},{vds_password})</run>
</test_case>
<test_case>
   <test_name>Sleep to give vdsm time to start.</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=15</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>Migrate VMs randomly</test_name>
   <test_action>migrateVmsRandomly</test_action>
   <parameters>vms='Migrations_VM-0 Migrations_VM-1 Migrations_VM-2 Migrations_VM-3 Migrations_VM-4', hosts='[vds]', seed=1, count=5</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
</test_case>
<test_case>
   <test_name>Migrate several VMs simultaneusly</test_name>
   <test_action>migrateVmsSimultaneously</test_action>
   <parameters>vm_name='Migrations_VM', range_low=0, range_high=4, hosts='[vds]', useAgent=False, seed=0</parameters>
   <positive>TRUE</positive>
   <bz>871616</bz>
   <run>loop(2)</run>
</test_case>
<test_case>
   <test_name>END_GROUP: pinged_online_migrations</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
</test_case>

<test_case>
   <test_name>START_GROUP: cluster_policies_based_migrations</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Run full CPU load on VM</test_name>
   <test_action>runLoadOnGuest</test_action>
   <parameters>targetVM='Migrations_VM-#loop_index', osType='linux', username='{vm_user}', password='{vm_password}', loadType='CPU', duration=0, port=6666, load=100, stopLG=True</parameters>
   <positive>TRUE</positive>
   <run>loop(5)</run>
   <fetch_output>load_agent->agent#loop_index</fetch_output>
</test_case>
<test_case>
   <test_name>Set cluster SP to evenly_distributed</test_name>
   <test_action>updateCluster</test_action>
   <parameters>cluster='{cluster1_name}',scheduling_policy='e{scheduling_policy_evenly_distributed}', thrhld_high='60', duration='60'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM migration starts (evenly_distributed)</test_name>
   <test_action>waitForEvent</test_action>
   <parameters>query='type=67', win_start_query='{cluster1_name} type=811'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM migrated (evenly_distributed)</test_name>
   <test_action>waitForEvent</test_action>
   <parameters>query='type=63', win_start_query='{cluster1_name} type=811'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>

<test_case>
   <test_name>Run zero CPU load on VM</test_name>
   <test_action>stopLoadOnGuest</test_action>
   <parameters>targetVM='Migrations_VM-#loop_index', loadType='CPU', agent=%agent#loop_index%</parameters>
   <positive>None</positive>
   <run>loop(5)</run>
</test_case>

<test_case>
   <test_name>Set cluster SP to power_saving</test_name>
   <test_action>updateCluster</test_action>
   <parameters>cluster='{cluster1_name}',scheduling_policy='e{scheduling_policy_power_saving}', thrhld_low='50', thrhld_high='90', duration='60'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM migration starts (power_saving)</test_name>
   <test_action>waitForEvent</test_action>
   <parameters>query='type=67', win_start_query='{cluster1_name} type=811'</parameters>
   <positive>NONE</positive>
   <bz>744813</bz>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM migrated (power_saving)</test_name>
   <test_action>waitForEvent</test_action>
   <parameters>query='type=63', win_start_query='{cluster1_name} type=811'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: cluster_policies_based_migrations</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>START_GROUP: migrations_tear-down</test_name>
   <test_action/>
   <parameters></parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='Migrations_VM-#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>loop(5)</run>
</test_case>
<test_case>
   <test_name>Wait for tasks to complete</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=20</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Remove MACs from cobbler</test_name>
   <test_action>cobblerRemoveMultiSystem</test_action>
   <parameters>
	   vms='Migrations_VM-#loop_index',
	   cobblerAddress='{cobbler_address}',
	   cobblerUser='{cobbler_user}',
	   cobblerPasswd='{cobbler_passwd}'
   </parameters>
   <positive>TRUE</positive>
   <run>loop(5)</run>
</test_case>
<test_case>
   <test_name>Remove VMs</test_name>
   <test_action>removeVms</test_action>
   <parameters>vms='Migrations_VM-0 Migrations_VM-1 Migrations_VM-2 Migrations_VM-3 Migrations_VM-4'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for VM remove tasks to complete</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=15</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Deactivate Storage Domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='{datacenter1_name}', storagedomain='{storagedomain1}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Remove Data Centers</test_name>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='{datacenter1_name} {datacenter2_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Remove Master Storage Domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='{storagedomain1}', host='{vds[0]}', format='true'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Set Hosts To Maintenance</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
</test_case>
<test_case>
   <test_name>Remove Hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
</test_case>
<test_case>
   <test_name>Remove Clusters</test_name>
   <test_action>removeClusters</test_action>
   <parameters>clusters='{cluster1_name} {cluster2_name} {cluster3_name}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Check no error events occured</test_name>
   <test_action>searchForRecentEvent</test_action>
   <parameters>win_start_query='{datacenter1_name} type=950', query='severity>=error', expected_count=0</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>

<test_case>
   <test_name>END_GROUP: migrations_tear-down</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
</test_case>
</input>

