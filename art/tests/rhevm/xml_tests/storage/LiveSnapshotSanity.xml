<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set ts=3 sw=3 expandtab: -->
<?xml-stylesheet type="text/xsl" href="table.xslt"?>

<input tcms_plan_id="5588">
<test_case>
   <test_name>START_GROUP: TC_141612</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>141612</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create hosts</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>loop({vds},{vds_password})</run>
</test_case>
<test_case>
   <test_name>Wait until all hosts are up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]},{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for SPM</test_name>
   <test_type>rest</test_type>
   <test_action>waitForSPM</test_action>
   <parameters>datacenter='live_snapshot_dc', timeout=100, sleep=10</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get SPM host</test_name>
   <test_type>rest</test_type>
   <test_action>returnSPMHost</test_action>
   <parameters>hosts='[vds]'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output>spmHost-&gt;spmHost</fetch_output>
</test_case>
<test_case>
   <test_name>Create VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_on_spm', cluster='live_snapshot_cluster', placement_host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_spm', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_on_spm', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install OS</test_name>
   <test_type>rest</test_type>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_on_spm', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get any HSM host</test_name>
   <test_type>rest</test_type>
   <test_action>getAnyNonSPMHost</test_action>
   <parameters>hosts='[vds]'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output>hsmHost-&gt;hsmHost</fetch_output>
</test_case>
<test_case>
   <test_name>Create VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_on_hsm', cluster='live_snapshot_cluster', placement_host=%hsmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_hsm', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_on_hsm', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install OS</test_name>
   <test_type>rest</test_type>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_on_hsm', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until installation starts</test_name>
   <test_type>rest</test_type>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_type>rest</test_type>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_on_spm', nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddressSPM</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from cobbler</test_name>
   <test_type>rest</test_type>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}', mac=%macAddressSPM%</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_type>rest</test_type>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_on_hsm', nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddressHSM</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from cobbler</test_name>
   <test_type>rest</test_type>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}', mac=%macAddressHSM%</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for VM on SPM to finish installation</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for VM on HSM to finish installation</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_hsm', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot from VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_on_spm', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='/tmp', root_name_prefix='snap', dir_cnt=1, file_cnt=3</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path</fetch_output>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddressSPM%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path%, dest='/var/tmp'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Restore snapshot</test_name>
   <test_action>restoreSnapshot</test_action>
   <parameters>vm='vm_on_spm', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_on_spm', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM is operable</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Validate that data on VM are not present</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Create snapshot from VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_on_hsm', description='hsm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='/tmp', root_name_prefix='snap', dir_cnt=1, file_cnt=3</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path</fetch_output>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddressHSM%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path%, dest='/var/tmp'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Restore snapshot</test_name>
   <test_action>restoreSnapshot</test_action>
   <parameters>vm='vm_on_hsm', description='hsm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_on_hsm', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM is operable</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Validate that data on VM are not present</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate HSM host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host=%hsmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove HSM host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host=%hsmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_on_spm2', cluster='live_snapshot_cluster', placement_host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_spm2', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_on_spm2', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install OS</test_name>
   <test_type>rest</test_type>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_on_spm2', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until installation starts</test_name>
   <test_type>rest</test_type>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_type>rest</test_type>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_on_spm2', nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddressSPM</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from cobbler</test_name>
   <test_type>rest</test_type>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}', mac=%macAddressSPM%</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for VM on SPM to finish installation</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm2', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot from VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_on_spm2', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='/tmp', root_name_prefix='snap', dir_cnt=1, file_cnt=3</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path</fetch_output>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddressSPM%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path%, dest='/var/tmp'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Restore snapshot</test_name>
   <test_action>restoreSnapshot</test_action>
   <parameters>vm='vm_on_spm2', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_on_spm2', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM is operable</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Validate that data on VM are not present</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host=%spmHost%, format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate SPM host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove SPM host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_141612</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP: TC_141646</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>141646</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create hosts</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>loop({vds},{vds_password})</run>
</test_case>
<test_case>
   <test_name>Wait until all hosts are up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]},{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for SPM</test_name>
   <test_type>rest</test_type>
   <test_action>waitForSPM</test_action>
   <parameters>datacenter='live_snapshot_dc', timeout=100, sleep=10</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get SPM host</test_name>
   <test_type>rest</test_type>
   <test_action>returnSPMHost</test_action>
   <parameters>hosts='[vds]'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output>spmHost-&gt;spmHost</fetch_output>
</test_case>
<test_case>
   <test_name>Create VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_on_spm', cluster='live_snapshot_cluster', placement_host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_spm', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add the second virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_spm', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_on_spm', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install OS</test_name>
   <test_type>rest</test_type>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_on_spm', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get any HSM host</test_name>
   <test_type>rest</test_type>
   <test_action>getAnyNonSPMHost</test_action>
   <parameters>hosts='[vds]'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output>hsmHost-&gt;hsmHost</fetch_output>
</test_case>
<test_case>
   <test_name>Create VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_on_hsm', cluster='live_snapshot_cluster', placement_host=%hsmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_hsm', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add the second virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_hsm', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_on_hsm', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install OS</test_name>
   <test_type>rest</test_type>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_on_hsm', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until installation starts</test_name>
   <test_type>rest</test_type>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_type>rest</test_type>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_on_spm', nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddressSPM</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from cobbler</test_name>
   <test_type>rest</test_type>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}', mac=%macAddressSPM%</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_type>rest</test_type>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_on_hsm', nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddressHSM</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from cobbler</test_name>
   <test_type>rest</test_type>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}', mac=%macAddressHSM%</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for VM on SPM to finish installation</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm', timeout=1800</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for VM on HSM to finish installation</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_hsm', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot from VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_on_spm', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='/tmp', root_name_prefix='snap', dir_cnt=1, file_cnt=3</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path</fetch_output>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddressSPM%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path%, dest='/var/tmp'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Restore snapshot</test_name>
   <test_action>restoreSnapshot</test_action>
   <parameters>vm='vm_on_spm', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_on_spm', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM is operable</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Validate that data on VM are not present</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Create snapshot from VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_on_hsm', description='hsm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='/tmp', root_name_prefix='snap', dir_cnt=1, file_cnt=3</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path</fetch_output>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddressHSM%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path%, dest='/var/tmp'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Restore snapshot</test_name>
   <test_action>restoreSnapshot</test_action>
   <parameters>vm='vm_on_hsm', description='hsm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_on_hsm', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM is operable</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Validate that data on VM are not present</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_on_spm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM on HSM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_on_hsm'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate HSM host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host=%hsmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove HSM host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host=%hsmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_on_spm2', cluster='live_snapshot_cluster', placement_host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_spm2', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add the second virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_on_spm2', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_on_spm2', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install OS</test_name>
   <test_type>rest</test_type>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_on_spm2', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until installation starts</test_name>
   <test_type>rest</test_type>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_type>rest</test_type>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_on_spm2', nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddressSPM</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from cobbler</test_name>
   <test_type>rest</test_type>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}', mac=%macAddressSPM%</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for VM on SPM to finish installation</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm2', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot from VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_on_spm2', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='/tmp', root_name_prefix='snap', dir_cnt=1, file_cnt=3</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path</fetch_output>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddressSPM%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path%, dest='/var/tmp'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Restore snapshot</test_name>
   <test_action>restoreSnapshot</test_action>
   <parameters>vm='vm_on_spm2', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_on_spm2', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM is operable</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Validate that data on VM are not present</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM on SPM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_on_spm2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host=%spmHost%, format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate SPM host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove SPM host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host=%spmHost%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_141646</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP: TC_141614</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>141614</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until host is up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_with_two_disks', cluster='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_with_two_disks', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add the second virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_with_two_disks', size=4294967296, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_with_two_disks', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_with_two_disks', description='vm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check that only one snapshot was created</test_name>
   <test_type>rest</test_type>
   <test_action>xpathVmsLinks</test_action>
   <parameters>entity='vm_with_two_disks', link_name='snapshots', xpath='count(/snapshots/snapshot)', rslt_eval='2==result'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_with_two_disks'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_with_two_disks'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host='{vds[0]}', format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_141614</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP: TC_141636</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>141636</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until host is up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_for_testing', cluster='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_for_testing', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_for_testing', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_for_testing', description=4000*'a'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_for_testing', description=4001*'a'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host='{vds[0]}', format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_141636</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP: TC_141644</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>141644</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until host is up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_for_testing', cluster='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_for_testing', size=6442450944, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_for_testing', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Install OS</test_name>
   <test_type>rest</test_type>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_for_testing', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until installation starts</test_name>
   <test_type>rest</test_type>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_type>rest</test_type>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_for_testing', nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from cobbler</test_name>
   <test_type>rest</test_type>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}', mac=%macAddress%</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for VM to finish installation</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_for_testing', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Prepare data to copy to VM</test_name>
   <test_action>prepareDataForVm</test_action>
   <parameters>root_dir='/tmp', root_name_prefix='snap', dir_cnt=1, file_cnt=3</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>YES</report>
   <fetch_output>data_path-&gt;data_path</fetch_output>
</test_case>
<test_case>
   <test_name>Get VM IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddress%</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output>ip-&gt;ip</fetch_output>
</test_case>
<test_case>
   <test_name>Copy data to VM</test_name>
   <test_action>copyDataToVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', src=%data_path%, dest='/var/tmp'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_for_testing', description='snapshot_01'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data on VM</test_name>
   <test_type>rest</test_type>
   <test_action>removeDirOnHost</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dirname='/var'+%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Restore snapshot</test_name>
   <test_action>restoreSnapshot</test_action>
   <parameters>vm='vm_for_testing', description='snapshot_01'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_for_testing', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until VM is operable</test_name>
   <test_type>rest</test_type>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Validate data on VM</test_name>
   <test_action>verifyDataOnVm</test_action>
   <parameters>ip=%ip%, user='{vm_linux_user}', password='{vm_linux_password}', osType='linux', dest='/var/tmp', destToCompare=%data_path%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <report/>
</test_case>
<test_case>
   <test_name>Stop vm</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove vm</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host='{vds[0]}', format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_141644</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP: TC_147751</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>147751</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds[0]}', root_password='{vds_password[0]}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait until host is up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd2', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[1]}', host='{vds[0]}', path='{data_domain_path[1]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}', target='{lun_target[1]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd2', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[1]}', lun_address='{lun_address[1]}', lun_target='{lun_target[1]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd2', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[1]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd2', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Activate the second data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>activateStorageDomain</test_action>
   <parameters>storagedomain='data_sd2', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_for_testing', cluster='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk from the first storage</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_for_testing', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk from the first storage</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_for_testing', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk from the second storage</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_for_testing', size=3221225472, wait='True', storagedomain='data_sd2', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk from the second storage</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_for_testing', size=3221225472, wait='True', storagedomain='data_sd2', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_for_testing', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_for_testing', description='spm_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_for_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Detach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>detachStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd2'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd2', host='{vds[0]}', format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host='{vds[0]}', format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate host</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove host</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host='{vds[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_147751</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP: TC_141738</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>141738</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create hosts</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>loop({vds},{vds_password})</run>
</test_case>
<test_case>
   <test_name>Wait until all hosts are up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]},{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create VM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_testing', cluster='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_testing', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_ide}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_testing', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_testing', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Migrate VM</test_name>
   <test_type>rest</test_type>
   <test_action>migrateVm</test_action>
   <parameters>vm='vm_testing', wait=False</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_testing', description='vm_snapshot'</parameters>
   <positive>FALSe</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_testing'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host=%spmHost%, format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate hosts</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
</test_case>
<test_case>
   <test_name>Remove hosts</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
</test_case>
<test_case>
   <test_name>Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_141738</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
<test_case>
   <test_name>START_GROUP: TC_286330</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>yes</run>
   <tcms_test_case>286330</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>tc_286330 Create data center</test_name>
   <test_type></test_type>
   <test_action>addDataCenter</test_action>
   <parameters>name='live_snapshot_dc', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <test_description/>
</test_case>
<test_case>
   <test_name>tc_286330 Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='live_snapshot_cluster', cpu='{cpu_name}', data_center='live_snapshot_dc', version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Create hosts</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='live_snapshot_cluster', wait=False</parameters>
   <positive>TRUE</positive>
   <run>loop({vds},{vds_password})</run>
</test_case>
<test_case>
   <test_name>tc_286330 Wait until all hosts are up</test_name>
   <test_type>rest</test_type>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]},{vds[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Create NFS data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
</test_case>
<test_case>
   <test_name>tc_286330 iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>tc_286330 iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>tc_286330 Create iSCSI data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>tc_286330 Create FCP data storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='data_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>tc_286330 Attach data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>attachStorageDomain</test_action>
   <parameters>storagedomain='data_sd', datacenter='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Create VM</test_name>
   <test_type>rest</test_type>
   <test_action>addVm</test_action>
   <parameters>name='vm_testing', cluster='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Add virtio COW disk</test_name>
   <test_type>rest</test_type>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_testing', size=3221225472, wait='True', storagedomain='data_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Add virtio nic</test_name>
   <test_type>rest</test_type>
   <test_action>addNic</test_action>
   <parameters>vm='vm_testing', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Create template from VM</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='vm_testing', name='template_testing', cluster='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Remove VM</test_name>
   <test_type>rest</test_type>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_testing'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Create thin VM</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_thin', description='', cluster='live_snapshot_cluster', storagedomain='data_sd', template='template_testing'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>tc_286330 Create cloned VM</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_cloned', description='', cluster='live_snapshot_cluster', storagedomain='data_sd', template='template_testing', disk_clone='True'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>tc_286330 Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_thin', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Start VM</test_name>
   <test_type>rest</test_type>
   <test_action>startVm</test_action>
   <parameters>vm='vm_cloned', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_thin', description='thin_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_thin'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Create snapshot</test_name>
   <test_type>rest</test_type>
   <test_action>addSnapshot</test_action>
   <parameters>vm='vm_cloned', description='cloned_snapshot1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Stop VM</test_name>
   <test_type>rest</test_type>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_cloned'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_thin'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>tc_286330 Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_cloned'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>tc_286330 Remove template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='template_testing'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>tc_286330 Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='live_snapshot_dc'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Deactivate data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='live_snapshot_dc', storagedomain='data_sd'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Remove data center</test_name>
   <test_type>rest</test_type>
   <test_action>removeDataCenters</test_action>
   <parameters>datacenters='live_snapshot_dc'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Remove data storage domain</test_name>
   <test_type>rest</test_type>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='data_sd', host='{vds[0]}', format='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>tc_286330 Deactivate hosts</test_name>
   <test_type>rest</test_type>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
</test_case>
<test_case>
   <test_name>tc_286330 Remove hosts</test_name>
   <test_type>rest</test_type>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
</test_case>
<test_case>
   <test_name>tc_286330 Remove cluster</test_name>
   <test_type>rest</test_type>
   <test_action>removeClusters</test_action>
   <parameters>clusters='live_snapshot_cluster'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>END_GROUP: TC_286330</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <report/>
</test_case>
</input>
