<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set ts=3 sw=3 expandtab: -->
<?xml-stylesheet type="text/xsl" href="table.xslt"?>

<input tcms_plan_id="6458">
<test_case>
   <test_name>START_GROUP:Auto-recoveryNon-operationalHost</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>if(len('[vds]'.split(','))&gt;1)</run>
   <tcms_test_case>174611</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='autorecov_noop', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='autorecov_noop_cl', cpu='{cpu_name}', data_center='autorecov_noop', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='autorecov_noop_cl', wait='true'</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='autorecov_noop', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='autorecov_noop'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Block outgoing connection from host to NFS storage domains</test_name>
   <test_action>blockConnection</test_action>
   <parameters>source='{vds[0]}', dest='{data_domain_address}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}');loop({data_domain_address})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Block outgoing connection from host to iSCSI storage domains</test_name>
   <test_action>blockConnection</test_action>
   <parameters>source='{vds[0]}', dest='{lun_address[0]}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}');loop({lun_address})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till host goes non-operational</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}', states='e{search_host_state_non_operational}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Unblock outgoing connection from host to NFS storage domains</test_name>
   <test_action>unblockConnection</test_action>
   <parameters>source='{vds[0]}', dest='{data_domain_address}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}');loop({data_domain_address})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Unblock outgoing connection from host to iSCSI storage domains</test_name>
   <test_action>unblockConnection</test_action>
   <parameters>source='{vds[0]}', dest='{lun_address[0]}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}');loop({lun_address})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till host goes up</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}', states='e{host_state_up}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <bz>879253</bz>
</test_case>
<test_case>
   <test_name>Wait till date-center comes up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='autorecov_noop'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='autorecov_noop', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='autorecov_noop'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='autorecov_noop_cl'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:Auto-recoveryNon-operationalHost</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>
<test_case>
   <test_name>WORKAROUND FOR BZ#842257</test_name>
   <test_action>runMachineCommand</test_action>
   <parameters>ip='{vds}', user='root', password='{vds_password}', cmd="dmsetup remove_all"</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>


<test_case>
   <test_name>START_GROUP:Auto-recoveryNon-responsiveHost</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>if(len('[vds]'.split(','))&gt;1)</run>
   <tcms_test_case>174610</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Get setup hostname</test_name>
   <test_action>getSetupHostname</test_action>
   <parameters>vdc='{vdc}'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>no</report>
   <vital>TRUE</vital>
   <fetch_output>hostname->hostname</fetch_output>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='autorecov_nonresp', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <vital>TRUE</vital>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='autorecov_noresp_cl', cpu='{cpu_name}', data_center='autorecov_nonresp', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='autorecov_noresp_cl', wait='true'</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <vital>TRUE</vital>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='autorecov_nonresp', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='autorecov_nonresp'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Block connection from rhevm to host on vdsm port</test_name>
   <test_action>blockConnection</test_action>
   <parameters>source=%hostname%, dest='{vds[0]}', userName='{vdc_admin}', password='{vdc_password}', port='54321'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till host goes non-responsive</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}', states='e{search_host_state_non_responsive}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Unblock outgoing connection from host to rhevm</test_name>
   <test_action>unblockConnection</test_action>
   <parameters>source=%hostname%, dest='{vds[0]}', userName='{vdc_admin}', password='{vdc_password}', port='54321'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till host goes up</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}', states='e{host_state_up}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <bz>879253</bz>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='autorecov_nonresp'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='autorecov_nonresp', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='autorecov_nonresp'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='autorecov_noresp_cl'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:Auto-recoveryNon-responsiveHost</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>

<test_case>
   <test_name>WORKAROUND FOR BZ#842257</test_name>
   <test_action>runMachineCommand</test_action>
   <parameters>ip='{vds}', user='root', password='{vds_password}', cmd="dmsetup remove_all"</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
</test_case>

<test_case>
   <test_name>START_GROUP:Auto-recoveryStorageDomain</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <!-- This feature has been dropped for 3.1 -->
   <run>no</run>
   <tcms_test_case>174613</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='autorecov_sd', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='autorecov_sd_cl', cpu='{cpu_name}', data_center='autorecov_sd', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='autorecov_sd_cl', wait='true'</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='autorecov_sd', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='autorecov_sd'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='sd1', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[1]}', host='{vds[0]}', path='{data_domain_path[1]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[1]}', target='{lun_target[1]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='sd1', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[1]}', lun_address='{lun_address[1]}', lun_target='{lun_target[1]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='sd1', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[1]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='autorecov_sd', storagedomain='sd1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Activate NFS storage domain</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='autorecov_sd', storagedomain='sd1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Block outgoing connection from host to non-master NFS storage domains</test_name>
   <test_action>blockConnection</test_action>
   <parameters>source='{vds}', dest='{data_domain_address[1]}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}');loop({vds})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Block outgoing connection from host to iSCSI storage domains</test_name>
   <test_action>blockConnection</test_action>
   <parameters>source='{vds}', dest='{lun_address[1]}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}');loop({vds})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait for storage domain status</test_name>
   <test_action>waitForStorageDomainStatus</test_action>
   <parameters>dataCenterName='autorecov_sd', storageDomainName='sd1', expectedStatus='e{storage_domain_state_inactive}', timeOut=600, sleepTime=15</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Unblock outgoing connection from host to NFS storage domains</test_name>
   <test_action>unblockConnection</test_action>
   <parameters>source='{vds}', dest='{data_domain_address[1]}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}');loop({vds})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Unblock outgoing connection from host to iSCSI storage domains</test_name>
   <test_action>unblockConnection</test_action>
   <parameters>source='{vds}', dest='{lun_address[1]}', userName='{vds_admin[0]}', password='{vds_password[0]}'</parameters>
   <positive>none</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}');loop({vds})</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait for storage domain status</test_name>
   <test_action>waitForStorageDomainStatus</test_action>
   <parameters>dataCenterName='autorecov_sd', storageDomainName='sd1', expectedStatus='e{storage_domain_state_active}', timeOut=600, sleepTime=15</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for storage domain status</test_name>
   <test_action>waitForStorageDomainStatus</test_action>
   <parameters>dataCenterName='autorecov_sd', storageDomainName='master_sd', expectedStatus='e{storage_domain_state_active}', timeOut=600, sleepTime=15</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='autorecov_sd'</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate non-master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='autorecov_sd', storagedomain='sd1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
  <test_name>Detach Non Master Domains</test_name>
  <test_action>execOnNonMasterDomains</test_action>
  <parameters>datacenter='autorecov_sd', operation='detach', type='all'</parameters>
  <positive>TRUE</positive>
  <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='autorecov_sd', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='autorecov_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove non-master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='sd1', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='autorecov_sd_cl'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:Auto-recoveryStorageDomain</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>
</input>
