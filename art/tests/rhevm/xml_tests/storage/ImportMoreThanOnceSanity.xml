<?xml version="1.0" encoding="UTF-8"?>
<!-- vim: set ts=3 sw=3 expandtab: -->
<?xml-stylesheet type="text/xsl" href="table.xslt"?>

<input tcms_plan_id="6458">
<test_case>
   <test_name>START_GROUP:ImportMoreThanOnce</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run>if(len('[vds]'.split(','))&gt;1)</run>
   <tcms_test_case>174611</tcms_test_case>
   <report/>
</test_case>
<test_case>
   <test_name>Create data center</test_name>
   <test_action>addDataCenter</test_action>
   <parameters>name='import_more_times', storage_type='{data_center_type}', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create cluster</test_name>
   <test_action>addCluster</test_action>
   <parameters>name='import_more_times_cl', cpu='{cpu_name}', data_center='import_more_times', version='{compatibility_version}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Adding host</test_name>
   <test_action>addHost</test_action>
   <parameters>name='{vds}', root_password='{vds_password}', cluster='import_more_times_cl', wait='true'</parameters>
   <positive>true</positive>
   <run>forkfor({vds},{vds_password})</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain NFS</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_nfs}', address='{data_domain_address[0]}', host='{vds[0]}', path='{data_domain_path[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_nfs}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI discover</test_name>
   <test_action>iscsiDiscover</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>iSCSI login</test_name>
   <test_action>iscsiLogin</test_action>
   <parameters>host='{vds[0]}', address='{lun_address[0]}', target='{lun_target[0]}'</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain iSCSI</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_iscsi}', host='{vds[0]}', lun='{lun[0]}', lun_address='{lun_address[0]}', lun_target='{lun_target[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create data storage domain FCP</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='master_sd', type='e{storage_dom_type_data}', storage_type='e{storage_type_fcp}', host='{vds[0]}', lun='{lun[0]}', lun_port=3260</parameters>
   <positive>true</positive>
   <run>if('{data_center_type}'=='e{storage_type_fcp}')</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Attach data storage domain to data center</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='import_more_times', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Wait till host goes up</test_name>
   <test_action>waitForHostsStates</test_action>
   <parameters>names='{vds[0]}', states='e{host_state_up}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create NFS export storage domain</test_name>
   <test_action>addStorageDomain</test_action>
   <parameters>name='{export_domain_name}', type='e{storage_dom_type_export}', storage_type='e{storage_type_nfs}', address='{export_domain_address[0]}', host='{vds[0]}', path='{export_domain_path[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Wait for data center status up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='import_more_times'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Attach NFS export domain</test_name>
   <test_action>attachStorageDomain</test_action>
   <parameters>datacenter='import_more_times', storagedomain='{export_domain_name}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Activate NFS export domain</test_name>
   <test_action>activateStorageDomain</test_action>
   <parameters>datacenter='import_more_times', storagedomain='{export_domain_name}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Create VM 1</test_name>
   <test_action>addVm</test_action>
   <parameters>name='vm_test', description='a', cluster='import_more_times_cl', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio cow disk</test_name>
   <test_action>addDiskToVm</test_action>
   <parameters>vm='vm_test', size=6442450944, wait='True', storagedomain='master_sd', type='e{disk_type_data}', interface='e{interface_virtio}', format='e{format_cow}', sparse='true', bootable='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Add virtio nic</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='vm_test', name='nic1', network='{mgmt_bridge}', interface='e{nic_type_virtio}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Install RHEL</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='vm_test', nic='nic1', image='{cobbler_profile}', cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Wait till installation starts</test_name>
   <test_action>sleep</test_action>
   <parameters>seconds=120</parameters>
   <positive>none</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='vm_test', nic='nic1'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>no</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Remove system from Cobbler</test_name>
   <test_action>cobblerRemoveSystem</test_action>
   <parameters>cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', mac=%macAddress%</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Get IP address of VM</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddress%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>ip-&gt;ipAddress</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Remove persistent NIC associations from the VM</test_name>
   <test_action>setPersistentNetwork</test_action>
   <parameters>host=%ipAddress%, password='{vm_linux_password}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='vm_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create template from VM</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='vm_test', name='temp_test', cluster='import_more_times_cl'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
   <test_name>Export VM</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='vm_test', storagedomain='{export_domain_name}'</parameters>
   <positive>true</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Export template</test_name>
   <test_action>exportTemplate</test_action>
   <parameters>template='temp_test', storagedomain='{export_domain_name}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='vm_test'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='temp_test'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import vm</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='vm_test', import_storagedomain='master_sd', export_storagedomain='{export_domain_name}', cluster='import_more_times_cl'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <bz>853045</bz>
</test_case>
<test_case>
   <test_name>Wait till vm is imported</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='vm_test', timeout=7200, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Import the same VM</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='vm_test', import_storagedomain='master_sd', export_storagedomain='{export_domain_name}', cluster='import_more_times_cl', name='twin_brother'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <bz>853045</bz>
</test_case>
<test_case>
   <test_name>Wait till vm is imported</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='twin_brother', timeout=7200, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Import template</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='temp_test', import_storagedomain='master_sd', export_storagedomain='{export_domain_name}', cluster='import_more_times_cl'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <bz>853045</bz>
</test_case>
<test_case>
   <test_name>Wait till template is imported</test_name>
   <test_action>waitForTemplatesStates</test_action>
   <parameters>names='temp_test', timeout=7200</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Import the same template</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='temp_test', import_storagedomain='master_sd', export_storagedomain='{export_domain_name}', cluster='import_more_times_cl', name='twin_template'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <bz>853045</bz>
</test_case>
<test_case>
   <test_name>Wait till template is imported</test_name>
   <test_action>waitForTemplatesStates</test_action>
   <parameters>names='twin_template', timeout=7200</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create VMs</test_name>
   <test_action>addVm</test_action>
   <parameters>name='from_first', description='a', cluster='import_more_times_cl', storagedomain='master_sd', template='temp_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Create VMs</test_name>
   <test_action>addVm</test_action>
   <parameters>name='from_twin', description='a', cluster='import_more_times_cl', storagedomain='master_sd', template='twin_template'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='vm_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='twin_brother'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='from_first'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='from_twin'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='vm_test', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='twin_brother', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='from_twin', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Wait for GuestInfo IP address</test_name>
   <test_action>waitForIP</test_action>
   <parameters>vm='from_first', timeout=1800</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVms</test_action>
   <parameters>vms='vm_test, from_twin, from_first, twin_brother'</parameters>
   <positive>none</positive>
   <run>yes</run>
   <report>yes</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVms</test_action>
   <parameters>vms='twin_brother,from_first,from_twin,vm_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='twin_template'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove template</test_name>
   <test_action>removeTemplate</test_action>
   <parameters>template='temp_test'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for all background tasks to finish on hosts</test_name>
   <test_action>waitForTasks</test_action>
   <parameters>vdc='{host}', vdc_password='{password}', datacenter='import_more_times'</parameters>
   <positive>None</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate export domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='import_more_times', storagedomain='{export_domain_name}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
  <test_name>Detach Non Master Domains</test_name>
  <test_action>execOnNonMasterDomains</test_action>
  <parameters>datacenter='import_more_times', operation='detach', type='all'</parameters>
  <positive>TRUE</positive>
  <run>yes</run>
</test_case>
<test_case>
   <test_name>Deactivate master data domain</test_name>
   <test_action>deactivateStorageDomain</test_action>
   <parameters>datacenter='import_more_times', storagedomain='master_sd'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove data centers</test_name>
   <test_action>removeDataCenter</test_action>
   <parameters>datacenter='import_more_times'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove export storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='{export_domain_name}', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove master storage domain</test_name>
   <test_action>removeStorageDomain</test_action>
   <parameters>storagedomain='master_sd', host='{vds[0]}', format='true'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Maintenace hosts</test_name>
   <test_action>deactivateHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove inactive hosts</test_name>
   <test_action>removeHost</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>true</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Remove clusters</test_name>
   <test_action>removeCluster</test_action>
   <parameters>cluster='import_more_times_cl'</parameters>
   <positive>true</positive>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>END_GROUP:ImportMoreThanOnce</test_name>
   <test_action/>
   <parameters/>
   <positive>none</positive>
   <run/>
   <fetch_output/>
   <report/>
</test_case>
</input>
