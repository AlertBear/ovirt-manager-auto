<input>
<test_case>
   <test_name>START_GROUP: VlansOverBond</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if('vlansoverbond' in '[run_groups]')</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>START_GROUP: Positive_VlansOverBond</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if('positive' in '[vlansoverbond]')</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>Convert OS name to OS type element </test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>osTypeElement-&gt;osTypeElement</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get boot OS</test_name>
   <test_action>getImageByOsType</test_action>
   <parameters>osType=%osTypeElement%,slim=True</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>osBoot-&gt;osBoot,floppy-&gt;floppy</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create multiple bridged networks with VLAN</test_name>
   <test_action>addMultipleVlanedNetworks</test_action>
   <parameters>networks={vlan_networks},data_center='{datacenter}'</parameters>
   <positive>NONE</positive>
   <run>if({vm_network})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create multiple bridgeless networks with VLAN </test_name>
   <test_action>addMultipleVlanedNetworks</test_action>
   <parameters>networks={vlan_networks},data_center='{datacenter}',usages=''</parameters>
   <positive>NONE</positive>
   <run>if(not {vm_network})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Attach VLAN networks to Cluster</test_name>
   <test_action>addNetworkToCluster</test_action>
   <parameters>network='{vlan_networks}', cluster='{cluster}', required='true'</parameters>
   <positive>TRUE</positive>
   <run>loop({vlan_networks})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>generate bond0 mode 1 to Hosts eth2 and eth3</test_name>
  <test_action>genSNBond</test_action>
  <parameters>name='{bond[0]}', slaves=['{host_nics[2]}','{host_nics[3]}'], mode=1</parameters>
  <positive>NONE</positive>
  <run>YES</run>
  <fetch_output>host_nic->bond0_nic</fetch_output>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<!-- FIXME: implement a genSN function which return list of objects -->
<test_case>
   <test_name>generate sw166 vlan network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{bond[0]}', network='{vlan_networks[0]}', vlan='{vlan_id[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw166_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>generate sw167 vlan network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{bond[0]}', network='{vlan_networks[1]}', vlan='{vlan_id[1]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw167_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>generate sw168 vlan network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{bond[0]}', network='{vlan_networks[2]}', vlan='{vlan_id[2]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw168_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>generate sw169 vlan network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{bond[0]}', network='{vlan_networks[3]}', vlan='{vlan_id[3]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw169_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Attach sw166 over Bond0 to Hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',nics=[%sw166_nic%,%sw167_nic%,%sw168_nic%,%sw169_nic%,%bond0_nic%], auto_nics=['{host_nics[0]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface</test_description>
</test_case>
<test_case>
   <test_name>START_GROUP: runVM</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if({vm_network})</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create VM from template</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name[0]}',cluster='{cluster}',template='{template_name}',display_type='e{display_type_vnc}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for disks status</test_name>
   <test_action>waitForDisksStat</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Update VM network to work with vlan interface</test_name>
   <test_action>updateNic</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic1',network='{vlan_networks[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Start VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VM connectivity through bond mode 1</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name[0]}',osType=%osTypeElement%,attempt=60,interval=5,user='{vm_linux_user}',password='{vm_linux_password}'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VM connectivity through bond mode 1</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name[0]}',osType=%osTypeElement%,attempt=30,interval=2,user='{vm_win_user}',password='{vm_win_password}'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('Win',%osTypeElement%))</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Shutdown VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: runVM</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>Detach VLAN networks from cluster</test_name>
   <test_action>removeNetworkFromCluster</test_action>
   <parameters>network='{vlan_networks}', cluster='{cluster}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vlan_networks})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Clear hosts interfaces</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',auto_nics=['{host_nics[0]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface.</test_description>
</test_case>
<test_case>
   <test_name>Save Network Configuration</test_name>
   <test_action>commitNetConfig</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove networks from DataCenter</test_name>
   <test_action>removeNetwork</test_action>
   <parameters>network='{vlan_networks}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vlan_networks})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Positive_VlansOverBond</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<!-- ======================================================================================================== -->
<test_case>
   <test_name>START_GROUP: Negative_VlansOverBond</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if('negative' in '[vlansoverbond]')</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Negative_VlansOverBond</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: VlansOverBond</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
</input>
