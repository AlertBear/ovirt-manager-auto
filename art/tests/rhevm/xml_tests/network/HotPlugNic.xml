<!--
Author: awinter
Description: This test tests hot plug nic on regular, vlan and bond networks.
In addition, It tests test cases at proposed in its TCMS plan: #5813
-->

<!--
     TODO: In the future we might want to check connectivity via HotPlugNic,
           This is why we have connectivity cases (Altough they are not running)
-->

<input xmlns:xi="http://www.w3.org/2001/XInclude" tcms_plan_id="5813">
<test_case>
   <test_name>START_GROUP: HotPlugNic</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if('hotplugnic' in '[run_groups]')</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>
       This test tests hot plug nic on regular, vlan and bond networks.
       In addition, It tests test cases at proposed in its TCMS plan: #5813
   </test_description>
</test_case>
<test_case>
   <test_name>START_GROUP: Positive_HotPlugNic</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if('positive' in '[hotplugnic]')</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>START_GROUP: HotPlugNic_BasicFunctionality</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if('basic' in '[hotplugnic]' or '*' in '[hotplugnic]')</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>
       Covers all basic functionalities, some negative cases, vlan, bond,
       vlan over bond and also cover all VM supported nic drivers
   </test_description>
</test_case>
<test_case>
   <test_name>Convert OS name to OS type element </test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>osTypeElement-&gt;osTypeElement</fetch_output>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create sw1 network with vlan id</test_name>
   <test_action>addNetwork</test_action>
   <parameters>name='{networks[0]}',data_center='{datacenter}',vlan_id='{vlan_id[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create sw2 network</test_name>
   <test_action>addNetwork</test_action>
   <parameters>name='{networks[1]}',data_center='{datacenter}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Attach networks to Cluster</test_name>
   <test_action>addNetworkToCluster</test_action>
   <parameters>network='{networks}', cluster='{cluster}',required='true'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({networks})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>generate sw1 vlan network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{host_nics[1]}', network='{networks[0]}', vlan='{vlan_id[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw1_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>generate sw2 bond mode 1 to Hosts eth2 and eth3</test_name>
  <test_action>genSNBond</test_action>
  <parameters>name='{bond[0]}', network='{networks[1]}', slaves=['{host_nics[2]}','{host_nics[3]}'], mode=1</parameters>
  <positive>NONE</positive>
  <run>YES</run>
  <fetch_output>host_nic->sw2_bond1_nic</fetch_output>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Add networks to Hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',nics=[%sw1_nic%,%sw2_bond1_nic%],auto_nics=['{host_nics[0]}','{host_nics[1]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface and SW1 network</test_description>
</test_case>
<test_case>
   <test_name>Create VMs from template</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name}',cluster='{cluster}',template='{template_name}',display_type='e{display_type_vnc}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for disks status</test_name>
   <test_action>waitForDisksStat</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Validate VIRTIO nic1 is active when create vm from template</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name}', nic='nic1'</parameters>
   <positive>True</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Add nic2 as RTL8139 with network sw1</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic2', interface='e{nic_type_rtl8139}', network='{networks[0]}',active='false'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<!-- Testing drivers  -->
<test_case>
  <test_name>Add nic30 as RTL8139 with network sw1</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic30', interface='e{nic_type_rtl8139}', network='{networks[0]}'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Add nic31 as VIRTIO with network sw1</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic31', interface='e{nic_type_virtio}', network='{networks[0]}'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Add nic32 as E1000 with network sw1</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic32', interface='e{nic_type_e1000}', network='{networks[0]}'</parameters>
  <positive>TRUE</positive>
  <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Activate nic2 while VM is down</test_name>
  <test_action>hotPlugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic2'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic2 while VM is down</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic2'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <tcms_plan_id>5813</tcms_plan_id>
  <tcms_test_case>147850</tcms_test_case>
  <test_description/>
</test_case>
<test_case>
  <test_name>Add nic20 as RTL8139 with network sw1</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic20', interface='e{nic_type_rtl8139}', network='{networks[0]}',active='true'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Add nic21 as RTL8139 with network sw1</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic21', interface='e{nic_type_rtl8139}', network='{networks[0]}',active='true'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Start VMs</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to start (status UP)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='up',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic21 while VM is up</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic21'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Validate RTL nic21 is inactive after starting vm</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name}', nic='nic21'</parameters>
   <positive>FALSE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VMs connectivity via nic30</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_linux_user}',password='{vm_linux_password}',nic='nic30'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VMs connectivity via nic30</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}',nic='nic30'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('Win',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VMs connectivity via nic31</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_linux_user}',password='{vm_linux_password}',nic='nic31'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VMs connectivity via nic31</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}',nic='nic31'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('Win',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VMs connectivity via nic32</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_linux_user}',password='{vm_linux_password}',nic='nic32'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VMs connectivity via nic32</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}',nic='nic32'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('Win',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic30 while VM is up</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic30'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic31 while VM is up</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic31'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic32 while VM is up</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic32'</parameters>
  <positive>TRUE</positive>
  <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Validate nic30 is inactive after starting vm</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name}', nic='nic30'</parameters>
   <positive>FALSE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Validate nic31 is inactive after starting vm</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name}', nic='nic31'</parameters>
   <positive>FALSE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Validate nic32 is inactive after starting vm</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name}', nic='nic32'</parameters>
   <positive>FALSE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>5813</tcms_plan_id>
   <tcms_test_case>147891</tcms_test_case>
   <test_description/>
</test_case>
<test_case>
  <test_name>Remove inactive nic30 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic30'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Remove inactive nic31 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic31'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Remove inactive nic32 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic32'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Shutdown VMs</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to Shutdown (status DOWN)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='down',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Add networks to Hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',nics=[%sw1_nic%,%sw2_bond1_nic%],auto_nics=['{host_nics[0]}','{host_nics[1]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface and SW1 network</test_description>
</test_case>
<test_case>
   <test_name>Start VMs</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to start (status UP)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='up',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Shutdown VMs</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to Shutdown (status DOWN)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='down',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Start VMs</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to start (status UP)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='up',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Validate RTL nic21 is inactive after starting vm</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name}', nic='nic21'</parameters>
   <positive>FALSE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>5813</tcms_plan_id>
   <tcms_test_case>147868</tcms_test_case>
   <test_description/>
</test_case>
<test_case>
   <test_name>Validate RTL nic2 is inactive after starting vm</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name}', nic='nic2'</parameters>
   <positive>FALSE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VMs connectivity using VIRTIO driver</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_linux_user}',password='{vm_linux_password}'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
   <!-- <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VMs connectivity using VIRTIO driver</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
   <!-- <run>if(re.search('Win',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic1 while VM is up</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic1'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <tcms_plan_id>5813</tcms_plan_id>
  <tcms_test_case>147853</tcms_test_case>
  <test_description/>
</test_case>
<test_case>
  <test_name>Activate nic2 while VM is up</test_name>
  <test_action>hotPlugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic2'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VMs connectivity using RTL driver</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_linux_user}',password='{vm_linux_password}',nic='nic2'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VMs connectivity using RTL driver</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}',nic='nic2'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('Win',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic2 while VM is UP</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic2'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Add nic3 as E1000 with network sw2 while host is UP</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic3', interface='e{nic_type_e1000}', network='{networks[1]}',active='false'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Activate nic3 while VM is UP</test_name>
  <test_action>hotPlugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic3'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VMs connectivity using E1000 driver</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_linux_user}',password='{vm_linux_password}',nic='nic3'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VMs connectivity using E1000 driver</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}',nic='nic3'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('Win',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Try to remove active nic3 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic3'</parameters>
  <positive>FALSE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Try to edit nic3 while VM is UP</test_name>
  <test_action>updateNic</test_action>
  <parameters>vm='{vm_name}',nic='nic3',port_mirroring='{networks[1]}',network='{networks[0]}'</parameters>
  <positive>FALSE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <tcms_plan_id>5813</tcms_plan_id>
  <tcms_test_case>147875</tcms_test_case>
  <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic3 while VM is UP</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic3'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>add nic10 as active with network sw2 while host is UP</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic10', interface='e{nic_type_e1000}', network='{networks[1]}',active='true'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <tcms_plan_id>5813</tcms_plan_id>
  <tcms_test_case>147856</tcms_test_case>
  <test_description/>
</test_case>
<test_case>
  <test_name>Try to remove active nic10 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic10'</parameters>
  <positive>FALSE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Shutdown VMs</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to Shutdown (status DOWN)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='down',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Remove active nic21 while VM is DOWN</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic21'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Remove active nic20 while VM is DOWN</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic20'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Try to remove active nic10 while VM is DOWN</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic10'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Update cluster network sw2 to non required</test_name>
   <test_action>updateClusterNetwork</test_action>
   <parameters>cluster='{cluster}',network='{networks[1]}',required='false'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>generate sw1 vlan network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{host_nics[1]}', network='{networks[0]}', vlan='{vlan_id[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw1_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>generate sw2 bond mode 1 to Hosts eth2 and eth3</test_name>
  <test_action>genSNBond</test_action>
  <parameters>name='{bond[0]}', network='{networks[1]}', slaves=['{host_nics[2]}','{host_nics[3]}'], mode=1</parameters>
  <positive>NONE</positive>
  <run>YES</run>
  <fetch_output>host_nic->sw2_bond1_nic</fetch_output>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Add networks to Hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',nics=[%sw1_nic%,%sw2_bond1_nic%],auto_nics=['{host_nics[0]}','{host_nics[1]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface and SW1 network</test_description>
</test_case>
<test_case>
  <test_name>Activate nic2 while VM is Down</test_name>
  <test_action>hotPlugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic2'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Start VMs</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to start (status UP)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='up',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Linux VMs connectivity</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_linux_user}',password='{vm_linux_password}',nic='nic2'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('RHEL',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Windows VMs connectivity</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}',nic='nic2'</parameters>
   <positive>TRUE</positive>
   <run>NO</run>
<!-- <run>if(re.search('Win',%osTypeElement%));forkfor({vm_name})</run> -->
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Remove inactive nic1 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic1'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Remove inactive nic3 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic3'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Try to Activate nic3 even though it was removed from Host</test_name>
  <test_action>hotPlugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic3'</parameters>
  <positive>FALSE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Deactivate nic2 while VM is UP</test_name>
  <test_action>hotUnplugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic2'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Remove inactive nic2 while VM is UP</test_name>
  <test_action>removeNic</test_action>
  <parameters>vm='{vm_name}',nic='nic2'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Shutdown VMs</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to Shutdown (status DOWN)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='down',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create sw3 network</test_name>
   <test_action>addNetwork</test_action>
   <parameters>name='sw3',data_center='{datacenter}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Detach networks from cluster</test_name>
   <test_action>removeNetworkFromCluster</test_action>
   <parameters>network='{networks}', cluster='{cluster}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({networks})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Attach sw3 to Cluster as non-required</test_name>
   <test_action>addNetworkToCluster</test_action>
   <parameters>network='sw3', cluster='{cluster}',required='false'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>generate sw3 vlan network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{host_nics[1]}', network='sw3', vlan='{vlan_id[2]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw3_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Start VMs</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to start (status UP)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='up',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Add nic4 as E1000 with network sw3 while host is UP</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic4', interface='e{nic_type_e1000}', network='sw3',active='true'</parameters>
  <positive>FALSE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Add nic4 as E1000 with network sw3 while host is UP</test_name>
  <test_action>addNic</test_action>
  <parameters>vm='{vm_name}',name='nic4', interface='e{nic_type_e1000}', network='sw3',active='false'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
  <test_name>Activate nic4 even though it is not configured in Host</test_name>
  <test_action>hotPlugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic4'</parameters>
  <positive>FALSE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Add network to Hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',nics=[%sw3_nic%],auto_nics=['{host_nics[0]}','{host_nics[1]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface and SW1 network</test_description>
</test_case>
<test_case>
  <test_name>Activate nic4</test_name>
  <test_action>hotPlugNic</test_action>
  <parameters>vm='{vm_name}',nic='nic4'</parameters>
  <positive>TRUE</positive>
  <run>forkfor({vm_name})</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <tcms_plan_id>5813</tcms_plan_id>
  <tcms_test_case>199424</tcms_test_case>
  <test_description/>
</test_case>
<test_case>
   <test_name>Shutdown VMs</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for VM to Shutdown (status DOWN)</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name}',state='down',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VMs</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vm_name})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Detach networks from cluster</test_name>
   <test_action>removeNetworkFromCluster</test_action>
   <parameters>network='sw3', cluster='{cluster}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove networks from hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',auto_nics=['{host_nics[0]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface.</test_description>
</test_case>
<test_case>
   <test_name>Save Network Configuration</test_name>
   <test_action>commitNetConfig</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove networks from DataCenter</test_name>
   <test_action>removeNetwork</test_action>
   <parameters>network='{networks}',data_center='{datacenter}'</parameters>
   <positive>TRUE</positive>
   <run>forkfor({networks})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: HotPlugNic_BasicFunctionality</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Positive_HotPlugNic</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<!-- ======================================================================================================== -->
<test_case>
   <test_name>START_GROUP: Negative_HotPlugNic</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if('negative' in '[hotplugnic]')</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Negative_HotPlugNic</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: HotPlugNic</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
</input>
