<input>
<test_case>
   <test_name>Import template when the same template already exists in other DC</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{template_name}0',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>FALSE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import the same template with different name</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{template_name}0',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1', name='{template_name}Same'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Wait till template is imported</test_name>
   <test_action>waitForTemplatesStates</test_action>
   <parameters>names='{template_name}Same', timeout=7200</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Create VM from template imported more than once</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name[0]}',cluster='{cluster}1',template='{template_name}Same',display_type='e{display_type_spice}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for disks status</test_name>
   <test_action>waitForDisksStat</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Start VM from template imported more than once </test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get MAC address of VM created from template imported more than once</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
    <test_name>Wait till vm is up</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name[0]}', timeout=120, states='e{vm_state_up}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Stop VM from template imported more than once</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>False</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM created from template imported more than once</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>False</vital>
   <test_description/>
</test_case>

<test_case>
    <test_name>Remove Template in '{comp_version[0]}'</test_name>
    <test_action>removeTemplate</test_action>
    <parameters>template='{template_name}0'</parameters>
    <positive>TRUE</positive>
    <run>yes</run>
    <fetch_output/>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
    <test_name>Remove Imported Template from '{comp_version[0]}'</test_name>
    <test_action>removeTemplate</test_action>
    <parameters>template='{template_name}Same'</parameters>
    <positive>TRUE</positive>
    <run>yes</run>
    <fetch_output/>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
   <test_name>Export template from '{comp_version[1]}'</test_name>
   <test_action>exportTemplate</test_action>
   <parameters>template='{template_name}1',storagedomain='ImpExp_{data_center_type}', wait=True</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported template to '{comp_version[1]}' when the same template already exists in the DC</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{template_name}1',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>FALSE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import the same template with different name in '{comp_version[1]}'</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{template_name}1',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1', name='{template_name}1Same'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Wait till template is imported</test_name>
   <test_action>waitForTemplatesStates</test_action>
   <parameters>names='{template_name}1Same', timeout=7200</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Create VM from template imported more than once in '{comp_version[1]}'</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name[0]}',cluster='{cluster}1',template='{template_name}1Same',display_type='e{display_type_spice}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for disks status</test_name>
   <test_action>waitForDisksStat</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Start VM from template imported more than once </test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get MAC address of VM created from template imported more than once</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194554</tcms_test_case>
   <test_description/>
</test_case>
<test_case>
    <test_name>Wait till vm is up</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name[0]}', timeout=120, states='e{vm_state_up}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Stop VM from template imported more than once</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>False</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM created from template more than once</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>False</vital>
   <test_description/>
</test_case>

<test_case>
    <test_name>Remove Template in '{comp_version[1]}'</test_name>
    <test_action>removeTemplate</test_action>
    <parameters>template='{template_name}1'</parameters>
    <positive>TRUE</positive>
    <run>YES</run>
    <fetch_output/>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
    <test_name>Remove Template in '{comp_version[1]}' imported more than once</test_name>
    <test_action>removeTemplate</test_action>
    <parameters>template='{template_name}1Same'</parameters>
    <positive>TRUE</positive>
    <run>YES</run>
    <fetch_output/>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
   <test_name>Import exported template to '{comp_version[1]}'</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{template_name}1',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait till template is imported</test_name>
   <test_action>waitForTemplatesStates</test_action>
   <parameters>names='{template_name}1', timeout=7200</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Create VM from template imported in '{comp_version[1]}'</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name[0]}',cluster='{cluster}1',template='{template_name}1',display_type='e{display_type_spice}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for disks status</test_name>
   <test_action>waitForDisksStat</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Start VM from template in '{comp_version[1]}' </test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get MAC address of VM created from template imported more than once</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194552</tcms_test_case>
   <test_description/>
</test_case>
<test_case>
    <test_name>Wait till vm is up</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name[0]}', timeout=120, states='e{vm_state_up}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Stop VM from template in '{comp_version[1]}'</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>False</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM created from template more than once</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>False</vital>
   <test_description/>
</test_case>
<test_case>
    <test_name>Remove Template in '{comp_version[1]}'</test_name>
    <test_action>removeTemplate</test_action>
    <parameters>template='{template_name}1'</parameters>
    <positive>TRUE</positive>
    <run>YES</run>
    <fetch_output/>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
   <test_name>Import the template from '{comp_version[0]}' with 4 NICs</test_name>
   <test_action>importTemplate</test_action>
   <parameters>template='{template_name}2',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Wait till template is imported</test_name>
   <test_action>waitForTemplatesStates</test_action>
   <parameters>names='{template_name}2', timeout=7200</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Create VM from template imported from '{comp_version[0]}' with 4 NICs</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name[0]}',cluster='{cluster}1',template='{template_name}2',display_type='e{display_type_spice}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for disks status</test_name>
   <test_action>waitForDisksStat</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Start VM from template imported from '{comp_version[0]}' with 4 NICs - fail as no hosts with 4 NICs exist </test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>FALSE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Get MAC address of VM created from template from '{comp_version[0]}' with 4 NICs</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get MAC address of VM created from template from '{comp_version[0]}' with 4 NICs</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic4'</parameters>
   <positive>FALSE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194553</tcms_test_case> <test_description/>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM created from template imported from '{comp_version[0]}' with 4 NICs</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>False</vital>
   <test_description/>
</test_case>

<test_case>
    <test_name>Remove Imported Template from '{comp_version[0]}' with 4 NICs</test_name>
    <test_action>removeTemplate</test_action>
    <parameters>template='{template_name}2'</parameters>
    <positive>TRUE</positive>
    <run>yes</run>
    <fetch_output/>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
</input>
