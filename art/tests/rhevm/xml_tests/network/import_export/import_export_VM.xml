<input>
<test_case>
   <test_name>Import exported VM with 4 VNICs</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{vm_name[2]}',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait for imported VM</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name[2]}', timeout=7200, states='e{vm_state_down}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Get MAC address of VM imported from 3.0 with 4 NICs</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[2]}',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get MAC address of VM imported from 3.0 with 4 NICs</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[2]}',nic='nic4'</parameters>
   <positive>FALSE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194247</tcms_test_case>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM imported from 3.0 with 4 NICs</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[2]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Import exported VM from 3.0 with 3 NICs</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{vm_name[0]}',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM with the same name from 3.0</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{vm_name[0]}',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>FALSE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Import exported VM with different name from 3.0</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{vm_name[0]}',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1',name='{vm_name[0]}Same'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Wait for imported VM</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name[0]}Same', timeout=7200, states='e{vm_state_down}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Start imported VM from 3.0</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Get MAC address of VM imported from 3.0</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194259</tcms_test_case>
   <test_description/>
</test_case>
<test_case>
    <test_name>Wait till vm is up</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name[0]}', timeout=120, states='e{vm_state_up}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Start imported VM more than once from 3.0</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[0]}Same'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Get MAC address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}Same',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194264</tcms_test_case>
   <test_description/>
</test_case>
<test_case>
    <test_name>Wait till vm is up</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name[0]}Same', timeout=120, states='e{vm_state_up}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Stop VM imported from 3.0</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Stop VM imported from 3.0 more than once</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}Same'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM imported from 3.0</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM imported from 3.0 more than once</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}Same'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Export VM in 3.1</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{vm_name[1]}',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Import exported VM in 3.1</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{vm_name[1]}',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Wait for imported VM in 3.1</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name[1]}', timeout=7200, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Import exported VM with different name</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{vm_name[1]}',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1',name='{vm_name[1]}Same'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Wait for imported VM</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name[1]}Same', timeout=7200, states='e{vm_state_down}'</parameters>
   <positive>true</positive>
   <run>yes</run>
   <report>yes</report>
</test_case>
<test_case>
   <test_name>Start original VM in 3.1</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[1]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194246</tcms_test_case>
</test_case>
<test_case>
    <test_name>Wait till vm is up</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name[1]}', timeout=120, states='e{vm_state_up}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Start imported VM more than once from 3.1</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name[1]}Same'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <tcms_plan_id>6915</tcms_plan_id>
   <tcms_test_case>194253</tcms_test_case>
   <fetch_output/>
</test_case>
<test_case>
    <test_name>Wait till vm is up</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name[1]}Same', timeout=120, states='e{vm_state_up}'</parameters>
    <positive>true</positive>
    <run>yes</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Get MAC address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[1]}',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get MAC address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[1]}Same',nic='nic#loop_index'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <run>loop(1-4)</run>
   <fetch_output>macAddress-&gt;macAddress#loop_index</fetch_output>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Stop VM imported from 3.1</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[1]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Stop VM imported from 3.1 more than once</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[1]}Same'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM imported from 3.1</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[1]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove VM imported from 3.1 more than once</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[1]}Same'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create VM without disks</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name[3]}',cluster='{cluster}1'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Add sw1 network to VM without disks</test_name>
   <test_action>addNic</test_action>
   <parameters>vm='{vm_name[3]}',name='nic1',network='{networks[0]}'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Export VM without disks</test_name>
   <test_action>exportVm</test_action>
   <parameters>vm='{vm_name[3]}',storagedomain='ImpExp_{data_center_type}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Remove VM after exporting it</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[3]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Import exported VM without disks after VM removal</test_name>
   <test_action>importVm</test_action>
   <parameters>vm='{vm_name[3]}',import_storagedomain='{storage}1',export_storagedomain='ImpExp_{data_center_type}',cluster='{cluster}1'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Get MAC address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[3]}',nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
   <report>YES</report>
   <bz>877737</bz>
   <vital>FALSE</vital>
   <!-- <tcms_plan_id>6915</tcms_plan_id> -->
   <!-- <tcms_test_case>225422</tcms_test_case> <test_description/> -->
</test_case>
<test_case>
   <test_name>Remove VM after importing it</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[3]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
</input>
