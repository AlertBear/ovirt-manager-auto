<input>
<test_case>
   <test_name>START_GROUP: Setup</test_name>
   <test_action/>
   <parameters>n/a2</parameters>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create ISCSI Data Center</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]', cpuName='{cpu_name}', username='root', password='[vds_password]', datacenter='{datacenter}', storage_type='e{storage_type_iscsi}', cluster='{cluster}', lun_address='[lun_address]', lun_target='[lun_target]', luns='[lun]', lun_port=3260, version='{compatibility_version}'</parameters>
   <positive>TRUE</positive>
   <run>if('{data_center_type}'=='e{storage_type_iscsi}')</run>
   <report>YES</report>
   <fetch_output/>
   <vital>TRUE</vital>
</test_case>
<test_case>
  <test_name>Create Logical Networks on DC</test_name>
  <test_action>addNetwork</test_action>
  <parameters>name='{networks[#loop_index]}',data_center='{datacenter}',vlan_id='{vlan_id[#loop_index]}'</parameters>
  <positive>TRUE</positive>
  <run>yes</run>
  <run>loop(2)</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>Attach Logical Networks to Cluster</test_name>
   <test_action>addNetworkToCluster</test_action>
   <parameters>network='{networks[#loop_index]}', cluster='{cluster}', required='false'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <run>loop(2)</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Add sw1 to host eth1</test_name>
   <test_action>attachHostNic</test_action>
   <parameters>host='{vds[0]}',nic='{host_nics[1]}',network='{networks[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
  <test_name>Add Bond0 sw2 to Host1</test_name>
  <test_action>addBond</test_action>
  <parameters>host='{vds[0]}',name='{bond[0]}', slaves=['{host_nics[2]}','{host_nics[3]}'],network='{networks[1]}'</parameters>
  <positive>TRUE</positive>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description>Run only for host contain >= 4 physical nics.</test_description>
</test_case>
<test_case>
  <test_name>Save Network Configuration</test_name>
  <test_action>commitNetConfig</test_action>
  <parameters>host='{vds[0]}'</parameters>
  <positive>TRUE</positive>
  <run>yes</run>
  <fetch_output/>
  <report>YES</report>
  <vital>FALSE</vital>
  <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Setup</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP: PrepareVM</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>if({vm_network})</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>Prepare linux VM </test_description>
</test_case>
<test_case>
   <test_name>Convert Os name to Os type element </test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>osTypeElement-&gt;osTypeElement</fetch_output>
</test_case>

<test_case>
   <test_name>Create VM from blank template add disk and install OS</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{vm_name[0]}',vmDescription='linux vm',cluster='{cluster}', nic='nic1', storageDomainName='DataCenterTest_data_domain0', size=21474836480, diskType='e{disk_type_system}', start='false', nicType='e{nic_type_virtio}', display_type='e{display_type_spice}', os_type=%osTypeElement%, user='{vm_linux_user}', password='{vm_linux_password}', installation=True, slim=True, cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}', cobblerPasswd='{cobbler_passwd}', network='{mgmt_bridge}', useAgent={useAgent}, port_mirroring='{mgmt_bridge}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Get mac address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic1'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>NO</report>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
</test_case>
<test_case>
   <test_name>Get IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddress%</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <fetch_output>ip-&gt;ipAddress</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Set Persistent Network on linux VM</test_name>
   <test_action>setPersistentNetwork</test_action>
   <parameters>host=%ipAddress%, password='{vm_linux_password}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP:PrepareVM</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP:Edit_VM_PM</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>Testing editing port mirroring on VM</test_description>
</test_case>
<test_case>
    <test_name>Add nic2 with portmirroring on network rhevm</test_name>
    <test_action>addNic</test_action>
    <parameters>vm='{vm_name[0]}',name='nic2', interface='e{nic_type_rtl8139}', network='{networks[0]}', port_mirroring='{networks[0]}'</parameters>
    <positive>TRUE</positive>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
    <test_name>Uncheck the checkbox with port mirroring on nic1</test_name>
    <test_action>updateNic</test_action>
    <parameters>vm='{vm_name[0]}',nic='nic1', network='{mgmt_bridge}'</parameters>
    <positive>TRUE</positive>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
   <test_name>Check VM has no port_mirroring</test_name>
   <test_action>getVmNicPortMirroring</test_action>
   <parameters>vm='{vm_name[0]}', nic='nic1'</parameters>
   <positive>False</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
</test_case>
<test_case>
    <test_name>Check the checkbox with port mirroring on nic1 on VM </test_name>
    <test_action>updateNic</test_action>
    <parameters>vm='{vm_name[0]}',nic='nic1', network='{mgmt_bridge}', port_mirroring='{mgmt_bridge}'</parameters>
    <positive>TRUE</positive>
    <report>YES</report>
    <vital>FALSE</vital>
    <test_description/>
</test_case>
<test_case>
   <test_name>Check VM has port_mirroring</test_name>
   <test_action>getVmNicPortMirroring</test_action>
   <parameters>vm='{vm_name[0]}', nic='nic1'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>END_GROUP:Edit_VM_PM</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>

<test_case>
   <test_name>START_GROUP:VM_From_Template</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>Testing port_mirroring with Template</test_description>
</test_case>
<test_case>
   <test_name>Create template from VM</test_name>
   <test_action>createTemplate</test_action>
   <parameters>vm='{vm_name[0]}', name='{template_name}', cluster='{cluster}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>Create VM from template</test_name>
   <test_action>addVm</test_action>
   <parameters>name='{vm_name[1]}',cluster='{cluster}',template='{template_name}',display_type='e{display_type_spice}'</parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check VM has no port_mirroring</test_name>
   <test_action>getVmNicPortMirroring</test_action>
   <parameters>vm='{vm_name[1]}', nic='nic#loop_index'</parameters>
   <positive>False</positive>
   <run>loop(1-3)</run>
   <fetch_output/>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>END_GROUP:VM_From_Template</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>

<test_case>
   <test_name>START_GROUP:TestRestart_VDSM_NETWORK</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>Testing port_mirroring with restart of vdsm and network</test_description>
</test_case>
<test_case>
   <test_name>Run VM</test_name>
   <test_action>startVm</test_action>
   <parameters>vm='{vm_name}', wait_for_status='up'</parameters>
   <positive>TRUE</positive>
   <run>loop({vm_name})</run>
   <report>YES</report>
   <fetch_output/>
</test_case>	
<test_case>
   <test_name>Restart vdsmd on the host</test_name>
   <test_action>restartVdsmd</test_action>
   <parameters>vds='{vds}', password='{vds_password[0]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check if data center status is problematic</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='{datacenter}', state='e{data_center_state_problematic}', timeout=300, sleep=10</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Check if data center status is up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='{datacenter}', state='e{data_center_state_up}', timeout=300, sleep=10</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Check VM has port_mirroring</test_name>
   <test_action>getVmNicPortMirroring</test_action>
   <parameters>vm='{vm_name[0]}', nic='nic1'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>Restart network on the host</test_name>
   <test_action>restartNetwork</test_action>
   <parameters>vds='{vds}', password='{vds_password[0]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
</test_case>
<test_case>
   <test_name>Check if data center status is up</test_name>
   <test_action>waitForDataCenterState</test_action>
   <parameters>name='{datacenter}', state='e{data_center_state_up}', timeout=300, sleep=10</parameters>
   <positive>NONE</positive>
   <run>YES</run>
</test_case>
<test_case>
   <test_name>Check VM has port_mirroring</test_name>
   <test_action>getVmNicPortMirroring</test_action>
   <parameters>vm='{vm_name[0]}', nic='nic1'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
</test_case>
<test_case>
   <test_name>END_GROUP:TestRestart_VDSM_NETWORK</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>START_GROUP:CleanSetup</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>Cleaning up Environment</test_description>
</test_case>
<test_case>
   <test_name>Stop VM</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vm_name})</run>
   <report>YES</report>
   <fetch_output/>
</test_case>
<test_case>
    <test_name>Wait till vm is down</test_name>
    <test_action>waitForVmsStates</test_action>
    <parameters>names='{vm_name}', timeout=120, states='e{vm_state_down}'</parameters>
    <positive>true</positive>
    <run>loop({vm_name})</run>
    <report>yes</report>
</test_case>
<test_case>
   <test_name>Clean hosts interfaces</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',auto_nics=['{host_nics[0]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface.</test_description>
</test_case>
<test_case>
   <test_name>Save Network Configuration</test_name>
   <test_action>commitNetConfig</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Clean data center</test_name>
   <test_action>cleanDataCenter</test_action>
   <parameters>datacenter='{datacenter}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <run>Yes</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP:CleanSetup</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
</input>

