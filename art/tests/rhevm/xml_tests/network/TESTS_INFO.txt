Summary:
In general our goal is to achieve full RHEVM network functionality testing.
The functionality concept is based on a simple flow: add, edit and remove within each RHEVM component.
It also divided to Sanity and topologies tests. This way we can manage our automation test to run full network validation which requires more resources and time
but covers real life scenarios with Live VMs and network traffic.
The second option is to run only sanity which validate full RHEVM functionality, takes less time with less resources but doesn't include real network traffic with real
VMs.
The entire test XML is divided to groups which gives the ability to decide which groups/topology will be tested each run.
This is configurable in test configuration file under the "run_topologies" parameter.

As for backward compatibility, we offer 3.1 and 3.0 flows in a different groups.


Environment restrictions:
1. One host for sanity and Two for topologies.
2. Each host should have at least 2 nics for sanity and 4 nics for topologies.
3. Network router should hold several vlans while each vlan is related to different network (DHCP should allocate different network regarding vlan).
   Vlans: each interface on the switch should have vlan allow (all the existing vlans)
   Trunk: also each interface should configured as trunk in order to pass vlan tagging between host and switch.
   Bond: every couple interfaces should also be a member of ether channel with LACP enabled (mode active).

   Host network (all of host's interfaces should be up and connected to the switch):
   - eth0 should hold the RHEVM bridge.
   - eth1 should be ready for vlan testing.
   - eth2 and eth3 should be connected to the same ether channel (member of same LACP bond).

Requirements:
1. Sanity: requires one host with at least 2 interfaces.
   only two interfaces won't including bonding validation.
   while 4 interfaces will include both vlan and bond validation.
2. Topologies: requires two hosts with 4 interfaces each.



################################################################################
Sanity (groups):
################################################################################
Sanity_30: will execute sanity test which validate RHEVM 3.0 features
(note that sanity 3.0 should pass on rhevm 3.1 as well)
1.
2.
3.


Sanity_31: will execute sanity test which validate RHEVM 3.1 features
1.
2.
3.


################################################################################
Negative:
################################################################################
1.
2.


################################################################################
Topologies:
Could run with Linux or Windows VM OS.
################################################################################

###########
Topology A:
Purpose: Validate all supported VM nic interfaces are working (virtio, e1000 and rtl8139)
###########
Topology A (key=topology-a):
1. Create VM from template
2. start VM and check connectivity on virtio
3. Stop VM
4. Edit VM nic1 interface=rtl8139
6. Start VM and check connectivity
7. Stop VM
8. Edit VM nic1 interface=e1000
9. Start VM and check connectivity
10. stop VM
11. remove VM


###########
Topology B:
Purpose: Validate VLAN support.
###########
Topology B 3.0 (key=topology-b-30):
1. Add network sw1 to DC with vlan tag
2. Attach sw1 to cluster
3. Add sw1 to host eth1
4. Create VM from template
5. Edit vm nic1 network to sw1
3. Start VM and check connectivity
4. Stop VM
5. Remove VM
6. Detach sw1 from Cluster
7. Remove sw1 from host eth1 (vlan eth1.X)
8. Remove sw1 from DC

Topology B 3.1 (key=topology-b-31):
1. Add VM network sw1 to DC with VLAN tag
2. Attach required network sw1 to cluster
3. Add sw1 to host eth1
4. Create VM from template
5. Edit VM active nic1 network to sw1
3. Start VM and check connectivity
4. Stop VM
5. Remove VM
6. Detach sw1 from Cluster
7. Remove sw1 from host eth1
8. Remove sw1 from DC


###########
Topology C:
Purpose: validate entire supported bonding modes (1,2,4,5).
###########
Topology C 3.0 (key=topology-c-30):
1. Add sw2 network to DC
2. Attach sw2 to cluster
3. Add sw2 to host as Bond0 with eth2 and eth3 and mode=1
4. Create VM from template
5. Edit VM nic1 network to sw2 and move host up
6. Start VM and check connectivity.
7. Stop VM and move host down
8. Edit hosts bond0 mode=2 and move host up
9. Start VM and check connectivity.
10. Stop VM and move host down
11. Edit hosts bond0 mode=4 and move host up
12. Start VM and check connectivity.
13. Stop VM and move host down
14. Edit hosts bond0 mode=5 and move host up
15. Start VM and check connectivity.
16. Stop VM
17. Remove VM
18. Detach sw2 from cluster
19. Remove bond0 from host
20. Remove sw2 from DC

Topology C 3.1 (key=topology-c-31):
1. Add VM network sw2 network to DC
2. Attach Required sw2 to cluster
3. Add sw2 to host as Bond0 with eth2 and eth3 and mode=1
4. Create VM from template
5. Edit VM active nic1 network to sw2
6. Start VM and check connectivity.
7. Stop VM
8. Edit hosts bond0 mode=2
9. Start VM and check connectivity.
10. Stop VM
11. Edit hosts bond0 mode=4
12. Start VM and check connectivity.
13. Stop VM
14. Edit hosts bond0 mode=5
15. Start VM and check connectivity.
16. Stop VM
17. Remove VM
18. Detach sw2 from cluster
19. Remove bond0 from host
20. Remove sw2 from DC

###########
Topology D:
Purpose: Validate multiple vlans over the same bonded interface.
###########
Topology D 3.0 (key=topology-d-30):
1. Add multiple networks to DC each hold different VLAN tag.
2. Attach all networks to cluster
3. Add all networks to host over bond0 with eth2 and eth3 mode=1
4. Create VM from template
if OS is Windows {
5. Remove existing VM nic1.
6. Add all networks (except rhevm) to VM
7. Start VM and Check connectivity through each VM nic.
} else if OS is Linux {
8. Edit nic1 network to first vlan.
9. Start VM and check connectivity.
10. Stop VM.
11. Edit nic1 network to second vlan.
12. Start VM and check connectivity
}
13. Stop VM
14. Remove VM
15. Detach all networks from cluster.
16. Remove all vlan interfaces from host
17. Remove all networks from DC

Topology D 3.1 (key=topology-d-31):
1. Add multiple VM networks to DC each hold different VLAN tag.
2. Attach all required networks to cluster
3. Add all networks to host over bond0 with eth2 and eth3 mode=1
4. Create VM from template
if OS is Windows {
5. Remove existing VM nic1.
6. Add all active networks (except rhevm) to VM
7. Start VM and Check connectivity through each VM nic.
} else if OS is Linux {
8. Edit active nic1 network to first vlan.
9. Start VM and check connectivity.
10. Stop VM.
11. Edit active nic1 network to second vlan.
12. Start VM and check connectivity
}
13. Stop VM
14. Remove VM
15. Detach all networks from cluster.
16. Remove all vlan interfaces from host
17. Remove all networks from DC

###########
Topology E:
Purpose: Validate cluster network state enforcement.
###########
Topology E 3.0 (key=topology-e-30):
1. Turn down Host2
2. Add sw1 network to DC with vlan tag
3. Add sw2 network to DC
4. Attach sw1 and sw2 to cluster
5. Add sw1 to host eth1 (vlan)
6. Add sw2 to host eth2
7. Move eth1 down.
8. Wait till host move to non-operational.
9. Move eth1 up and host up
10. Move eth2 down
11. Wait till host move to non-operational.
12. Move eth2 up and Remove sw2 from host eth2
13. Add sw2 to host bond0 with eth2 and eth3 mode=4
14. Move host up
15. Move eth2 down
16. Wait 70 sec to check that host doesn't move to non-operational
17. Move eth3 down
18. Wait till host move to non-operational
19. move both eth2 and eth3 up
20. Detach sw1 and sw2 from host.
21. Move host up
22. Remove sw2 (bond0) and sw1 (vlan) from host
23. Remove sw1 and sw2 from DC
24. Move host2 up


Topology E 3.1 (key=topology-e-31):
1. Turn down Host2
2. Add sw1 VM network to DC with vlan tag
3. Add sw2 VM network to DC
4. Attach sw1 and sw2 to cluster as required networks
5. Add sw1 to host eth1 (vlan)
6. Add sw2 to host eth2
7. Move eth1 down.
8. Wait till host move to non-operational.
9. Move eth1 up and host up
10. Move eth2 down
11. Wait till host move to non-operational.
12. Move eth2 up and Remove sw2 from host eth2
13. Add sw2 to host bond0 with eth2 and eth3 mode=4
14. Move host up
15. Move eth2 down
16. Wait 70 sec to check that host doesn't move to non-operational
17. Move eth3 down
18. Wait till host move to non-operational
19. move both eth2 and eth3 up
20. Detach sw1 and sw2 from host.
21. Move host up
22. Remove sw2 (bond0) and sw1 (vlan) from host
23. Remove sw1 and sw2 from DC
24. Move host2 up


###########
Topology F:
Purpose: Validate migration due to missing required network
###########
Topology F 3.0 (key=topology-f-30):
1. Add network sw1 to host with vlan tag
2. Add network sw2 to host
3. Attach sw1 and sw2 to cluster
4. Add sw1 to host eth1
5. Add sw2 to host bond0 with eth2 and eth3 and mode=4
6. Create VM from template
if OS is Windows {
7. Edit VM nic1 network=sw1
8. Add VM nic2 network=sw2
} else if OS is Linux {
9. Edit VM nic1 network=sw1
}
10. Start VM and check connectivity
11. Move host (contain the VM) eth1 down
12. Wait till host move to non-operational
13. Check if RHEVM migrate VM to second host
if OS is Windows {
14. Check nic1 and nic2 connectivity after migration.
} else if OS is Linux {
15. Check nic1 connectivity after migration
}
16. Stop VM
17. Remove VM
18. Detach sw1 and sw2 from cluster
19. Remove sw1 and sw2 from hosts
20. remove sw1 and sw2 from DC
21. Move first host up.

Topology F 3.1 (key=topology-f-31):
1. Add VM network sw1 to host with vlan tag
2. Add VM network sw2 to host
3. Attach sw1 and sw2 to cluster as required networks
4. Add sw1 to host eth1
5. Add sw2 to host bond0 with eth2 and eth3 and mode=4
6. Create VM from template
if OS is Windows {
7. Edit VM nic1 network=sw1 active
8. Add VM nic2 network=sw2 active
} else if OS is Linux {
9. Edit VM nic1 network=sw1 active
}
10. Start VM and check connectivity
11. Move host (contain the VM) eth1 down
12. Wait till host move to non-operational
13. Check if VM migrate to second host
if OS is Windows {
14. Check nic1 and nic2 connectivity after migration.
} else if OS is Linux {
15. Check nic1 connectivity after migration
}
16. Stop VM
17. Remove VM
18. Detach sw1 and sw2 from cluster
19. Remove sw1 and sw2 from hosts
20. remove sw1 and sw2 from DC
21. Move first host up.

