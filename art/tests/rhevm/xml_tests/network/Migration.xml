<input>
<test_case>
   <test_name>START_GROUP: Creating_the_setup</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create ISCSI DC, Cluster. Adding 2 Hosts and storage</test_name>
   <test_action>createDatacenter</test_action>
   <parameters>hosts='[vds]', cpuName='{cpu_name}', username='root', password='[vds_password]',
   datacenter='{datacenter}', storage_type='e{storage_type_iscsi}', cluster='{cluster}',
   lun_address='{lun_address}', lun_target='{lun_target}',luns='{lun}',lun_port=3260,
version='{compatibility_version}'
   </parameters>
   <positive>TRUE</positive>
   <run>YES</run>
   <report>YES</report>
   <fetch_output/>
   <vital>TRUE</vital>
   <test_description>Adding DC, CL, 2 hosts and storage</test_description>
</test_case>
<test_case>
   <test_name>Wait for SPM</test_name>
   <test_action>waitForSPM</test_action>
   <parameters>datacenter='{datacenter}',timeout=900,sleep=5</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<!-- Setting up a VM -->
<test_case>
   <test_name>Convert Os name to Os type element</test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output>osTypeElement-&gt;osTypeElement</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get RHEL boot Os</test_name>
   <test_action>getImageByOsType</test_action>
   <parameters>osType=%osTypeElement%,slim=True</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output>osBoot-&gt;osBoot</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create Linux Vm</test_name>
   <test_action>createVm</test_action>
   <parameters>vmName='{vm_name[0]}',vmDescription='linux vm',cluster='{cluster}',nic='nic1',nicType='e{nic_type_virtio}',
   storageDomainName='DataCenterTest_data_domain0',size=21474836480,diskType='e{disk_type_system}',display_type='e{display_type_spice}',
   cobblerAddress='{cobbler_address}',cobblerUser='{cobbler_user}',cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Install Linux Vm With Unattended</test_name>
   <test_action>unattendedInstallation</test_action>
   <parameters>vm='{vm_name[0]}',image=%osBoot%,cobblerAddress='{cobbler_address}', cobblerUser='{cobbler_user}',
   cobblerPasswd='{cobbler_passwd}'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Waiting for VM to be UP</test_name>
   <test_action>waitForVmsStates</test_action>
   <parameters>names='{vm_name[0]}'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for disks status</test_name>
   <test_action>waitForDisksStat</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get MAC address</test_name>
   <test_action>getVmMacAddress</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic1'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output>macAddress-&gt;macAddress</fetch_output>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get IP address</test_name>
   <test_action>convertMacToIpAddress</test_action>
   <parameters>mac=%macAddress%</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output>ip-&gt;ipAddress</fetch_output>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Validate VIRTIO nic1 is active</test_name>
   <test_action>isVmNicActive</test_action>
   <parameters>vm='{vm_name[0]}', nic='nic1'</parameters>
   <positive>True</positive>
   <run>YES</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Creating_the_setup</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>START_GROUP: Migration</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>START_GROUP: Positive_Migration</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>START_GROUP: ClusterPolicy</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>Check VM connectivity after automatic migration caused by non operational host</test_description>
</test_case>
<test_case>
   <test_name>Convert Os name to Os type element </test_name>
   <test_action>convertOsNameToOsTypeElement</test_action>
   <parameters>osName='{vm_os}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>osTypeElement-&gt;osTypeElement</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Get boot Os</test_name>
   <test_action>getImageByOsType</test_action>
   <parameters>osType=%osTypeElement%,slim=True</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output>osBoot-&gt;osBoot,floppy-&gt;floppy</fetch_output>
   <report>NO</report>
   <vital>TRUE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Create sw1 network</test_name>
   <test_action>addNetwork</test_action>
   <parameters>name='{networks[0]}',data_center='{datacenter}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Attach sw1 to Cluster</test_name>
   <test_action>addNetworkToCluster</test_action>
   <parameters>network='{networks[0]}', cluster='{cluster}',required='true'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>generate sw1 network element</test_name>
   <test_action>genSNNic</test_action>
   <parameters>nic='{host_nics[1]}', network='{networks[0]}'</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output>host_nic->sw1_nic</fetch_output>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Add sw1 to Hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',nics=[%sw1_nic%],auto_nics=['{host_nics[0]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface and SW1 network</test_description>
</test_case>
<test_case>
   <test_name>Validate that sw1 status is operational</test_name>
   <test_action>validateNetwork</test_action>
   <parameters>cluster='{cluster}', network='{networks[0]}',tag='status', val='operational'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Vm connectivity</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name[0]}',osType=%osTypeElement%,attempt=60,interval=8,user='{vm_linux_user}',password='{vm_linux_password}'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Vm connectivity </test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name[0]}',osType=%osTypeElement%,attempt=60,interval=3,user='{vm_win_user}',password='{vm_win_password}'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('Win',%osTypeElement%))</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait till VM is UP</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name[0]}',state='up',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Change VM network from management to sw1</test_name>
   <test_action>updateNic</test_action>
   <parameters>vm='{vm_name[0]}',nic='nic1',network='{networks[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Which Host does the VM runs on</test_name>
   <test_action>getVmHost</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output>vmHoster-&gt;hostName</fetch_output>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Turn DOWN eth1</test_name>
   <test_action>ifdownNic</test_action>
   <parameters>host=%hostName%,root_password='{vm_linux_password}',nic='{host_nics[1]}'</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check that Host become NON_OPERATIONAL within 70 sec</test_name>
   <test_action>waitForHostsStates</test_action>
   <!-- TODO: nonoperational change to reasonable constant -->
   <parameters>names=%hostName%, states='nonoperational',timeout=70</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait till VM Start Migration</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name[0]}',state='migrating_from',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait till VM comes UP after migration</test_name>
   <test_action>waitForVMState</test_action>
   <parameters>vm='{vm_name[0]}',state='up',sleep=1,timeout=120</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check Vm connectivity</test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name[0]}',osType=%osTypeElement%,attempt=10,interval=1,user='{vm_linux_user}',password='{vm_linux_password}'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('RHEL',%osTypeElement%))</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name> Check Vm connectivity </test_name>
   <test_action>checkVMConnectivity</test_action>
   <parameters>vm='{vm_name[0]}',osType=%osTypeElement%,attempt=10,interval=1,user='{vm_win_user}',password='{vm_win_password}'</parameters>
   <positive>TRUE</positive>
   <run>if(re.search('Win',%osTypeElement%))</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Turn UP eth1</test_name>
   <test_action>ifupNic</test_action>
   <parameters>host=%hostName%,root_password='{vm_linux_password}',nic='{host_nics[1]}',wait=False</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Activate Host</test_name>
   <test_action>activateHost</test_action>
   <parameters>host=%hostName%</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Check that eth1 is UP</test_name>
   <test_action>waitForHostNicState</test_action>
   <parameters>host=%hostName%,nic='{host_nics[1]}',state='up',interval=5, attempts=10</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Shutdown Vm</test_name>
   <test_action>stopVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove Vm</test_name>
   <test_action>removeVm</test_action>
   <parameters>vm='{vm_name[0]}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Detach sw1 from cluster</test_name>
   <test_action>removeNetworkFromCluster</test_action>
   <parameters>network='{networks[0]}', cluster='{cluster}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove sw1 from hosts</test_name>
   <test_action>sendSNRequest</test_action>
   <parameters>host='{vds}',auto_nics=['{host_nics[0]}'],check_connectivity='true', connectivity_timeout=60, force='false'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description>Send automatic MGMT interface.</test_description>
</test_case>
<test_case>
   <test_name>Save Network Configuration</test_name>
   <test_action>commitNetConfig</test_action>
   <parameters>host='{vds}'</parameters>
   <positive>TRUE</positive>
   <run>loop({vds})</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Remove sw1 from DataCenter</test_name>
   <test_action>removeNetwork</test_action>
   <parameters>network='{networks[0]}',data_center='{datacenter}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>YES</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>Wait for SPM</test_name>
   <test_action>waitForSPM</test_action>
   <parameters>datacenter='{datacenter}',timeout=900,sleep=5</parameters>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report>NO</report>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: ClusterPolicy</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Positive_Migration</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<!-- ======================================================================================================== -->
<test_case>
   <test_name>START_GROUP: Negative_Migration</test_name>
   <test_action/>
   <parameters>n/a1</parameters>
   <positive>NONE</positive>
   <run>YES</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Negative_Migration</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>END_GROUP: Migration</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description/>
</test_case>
<test_case>
   <test_name>START_GROUP:Cleaning_the_setup</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run>yes</run>
   <fetch_output/>
   <report/>
   <vital/>
   <test_description>Cleaning up Environment</test_description>
</test_case>
<test_case>
   <test_name>Cleaning the setup</test_name>
   <test_action>cleanDataCenter</test_action>
   <parameters>datacenter='{datacenter}'</parameters>
   <positive>TRUE</positive>
   <run>yes</run>
   <run>YES</run>
   <fetch_output/>
</test_case>
<test_case>
   <test_name>END_GROUP:Cleaning_the_setup</test_name>
   <test_action/>
   <parameters/>
   <positive>NONE</positive>
   <run/>
   <fetch_output/>
   <report/>
   <vital>FALSE</vital>
   <test_description/>
</test_case>
</input>